name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION_MATRIX: '["18.x", "20.x", "21.x"]'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # Job 1: Dependency and Security Scanning
  security-scan:
    name: Security & Dependency Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run dependency vulnerability scan
        run: yarn audit --level moderate
        continue-on-error: true

      - name: Run npm security audit
        run: |
          npx audit-ci --config .audit-ci.json
        continue-on-error: true

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

  # Job 2: Lint and Type Check
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    strategy:
      matrix:
        node-version: ${{ fromJson(env.NODE_VERSION_MATRIX) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run ESLint
        run: |
          yarn lint:check
          yarn lint:report || true

      - name: Run Prettier check
        run: yarn format:check

      - name: TypeScript type check - Shared packages
        run: yarn workspace @sparc/shared run type-check

      - name: TypeScript type check - Services
        run: |
          yarn workspace @sparc/api-gateway run type-check
          yarn workspace @sparc/auth-service run type-check
          yarn workspace @sparc/tenant-service run type-check
          yarn workspace @sparc/access-control-service run type-check
          yarn workspace @sparc/device-management-service run type-check
          yarn workspace @sparc/video-management-service run type-check
          yarn workspace @sparc/event-processing-service run type-check
          yarn workspace @sparc/analytics-service run type-check
          yarn workspace @sparc/reporting-service run type-check
          yarn workspace @sparc/mobile-credential-service run type-check
          yarn workspace @sparc/visitor-management-service run type-check
          yarn workspace @sparc/environmental-service run type-check
          yarn workspace @sparc/alert-service run type-check
          yarn workspace @sparc/integration-service run type-check
          yarn workspace @sparc/backup-recovery-service run type-check
          yarn workspace @sparc/security-compliance-service run type-check
          yarn workspace @sparc/maintenance-service run type-check
          yarn workspace @sparc/elevator-control-service run type-check
          yarn workspace @sparc/api-documentation-service run type-check
          yarn workspace @sparc/testing-infrastructure-service run type-check

      - name: TypeScript type check - Frontend
        run: yarn workspace @sparc/web run type-check

      - name: Upload lint results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-results-${{ matrix.node-version }}
          path: |
            eslint-report.json
            coverage/
          retention-days: 7

  # Job 3: Unit Tests with Coverage
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    strategy:
      matrix:
        node-version: ${{ fromJson(env.NODE_VERSION_MATRIX) }}
        service: [
          'shared',
          'api-gateway', 
          'auth-service',
          'tenant-service',
          'access-control-service',
          'device-management-service',
          'video-management-service',
          'event-processing-service',
          'analytics-service',
          'reporting-service',
          'mobile-credential-service',
          'visitor-management-service',
          'environmental-service',
          'alert-service',
          'integration-service',
          'backup-recovery-service',
          'security-compliance-service',
          'maintenance-service',
          'elevator-control-service',
          'api-documentation-service',
          'testing-infrastructure-service',
          'web'
        ]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run unit tests for ${{ matrix.service }}
        run: |
          if [ "${{ matrix.service }}" = "shared" ]; then
            yarn workspace @sparc/shared run test:coverage
          elif [ "${{ matrix.service }}" = "web" ]; then
            yarn workspace @sparc/web run test:coverage
          else
            yarn workspace @sparc/${{ matrix.service }} run test:coverage
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: ${{ matrix.service }}-${{ matrix.node-version }}
          name: ${{ matrix.service }}-coverage
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.service }}-${{ matrix.node-version }}
          path: |
            coverage/
            test-results.xml
          retention-days: 7

  # Job 4: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sparc_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      minio:
        image: minio/minio:latest
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 30s
          --health-timeout 20s
          --health-retries 3
        ports:
          - 9000:9000
          - 9001:9001

    strategy:
      matrix:
        node-version: ${{ fromJson(env.NODE_VERSION_MATRIX) }}
        test-suite: [
          'auth-integration',
          'access-control-integration', 
          'video-management-integration',
          'tenant-isolation',
          'api-gateway-integration',
          'event-processing-integration',
          'offline-resilience',
          'alert-service-integration',
          'integration-service-integration',
          'backup-recovery-integration',
          'security-compliance-integration',
          'maintenance-service-integration',
          'elevator-control-integration',
          'api-documentation-integration',
          'testing-infrastructure-integration'
        ]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/sparc_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          echo "MINIO_ENDPOINT=localhost:9000" >> .env.test
          echo "MINIO_ACCESS_KEY=minioadmin" >> .env.test
          echo "MINIO_SECRET_KEY=minioadmin" >> .env.test

      - name: Run database migrations
        run: |
          yarn workspace @sparc/auth-service run db:migrate
          yarn workspace @sparc/tenant-service run db:migrate
          yarn workspace @sparc/access-control-service run db:migrate
          yarn workspace @sparc/video-management-service run db:migrate
          yarn workspace @sparc/event-processing-service run db:migrate
          yarn workspace @sparc/alert-service run db:migrate
          yarn workspace @sparc/integration-service run db:migrate
          yarn workspace @sparc/backup-recovery-service run db:migrate
          yarn workspace @sparc/security-compliance-service run db:migrate
          yarn workspace @sparc/maintenance-service run db:migrate
          yarn workspace @sparc/elevator-control-service run db:migrate
          yarn workspace @sparc/api-documentation-service run db:migrate
          yarn workspace @sparc/testing-infrastructure-service run db:migrate

      - name: Run integration tests - ${{ matrix.test-suite }}
        run: yarn test:integration:${{ matrix.test-suite }}
        env:
          NODE_ENV: test
          CI: true

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results-${{ matrix.test-suite }}-${{ matrix.node-version }}
          path: |
            test-results/
            logs/
          retention-days: 7

  # Job 5: End-to-End Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sparc_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        node-version: ['20.x']
        browser: ['chromium', 'firefox']
        test-suite: [
          'auth-workflows',
          'access-control-workflows',
          'video-management-workflows',
          'dashboard-workflows',
          'multi-tenant-workflows',
          'mobile-responsive'
        ]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Install Playwright browsers
        run: yarn workspace @sparc/web run playwright install ${{ matrix.browser }}

      - name: Setup E2E environment
        run: |
          cp .env.example .env.e2e
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/sparc_e2e" >> .env.e2e
          echo "REDIS_URL=redis://localhost:6379" >> .env.e2e
          echo "NODE_ENV=test" >> .env.e2e

      - name: Build applications
        run: |
          yarn build:services
          yarn workspace @sparc/web run build

      - name: Start test environment
        run: |
          yarn start:test-env &
          sleep 30

      - name: Run E2E tests - ${{ matrix.test-suite }} on ${{ matrix.browser }}
        run: yarn workspace @sparc/web run test:e2e:${{ matrix.test-suite }} --project=${{ matrix.browser }}

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results-${{ matrix.test-suite }}-${{ matrix.browser }}
          path: |
            web/test-results/
            web/playwright-report/
          retention-days: 7

  # Job 6: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sparc_perf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        test-type: [
          'api-load-test',
          'database-performance',
          'video-streaming-load',
          'concurrent-access-control',
          'multi-tenant-isolation',
          'alert-service-load',
          'integration-service-load',
          'backup-recovery-performance',
          'security-compliance-load',
          'maintenance-service-load',
          'elevator-control-load',
          'api-documentation-load',
          'testing-infrastructure-load'
        ]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Setup performance test environment
        run: |
          cp .env.example .env.perf
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/sparc_perf" >> .env.perf
          echo "REDIS_URL=redis://localhost:6379" >> .env.perf

      - name: Build and start services
        run: |
          yarn build:services
          yarn start:perf-env &
          sleep 45

      - name: Run performance tests - ${{ matrix.test-type }}
        run: yarn test:performance:${{ matrix.test-type }}

      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results-${{ matrix.test-type }}
          path: |
            performance-results/
            k6-results/
          retention-days: 7

  # Job 7: Build Validation
  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    strategy:
      matrix:
        node-version: ${{ fromJson(env.NODE_VERSION_MATRIX) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build shared packages
        run: yarn workspace @sparc/shared run build

      - name: Build all services
        run: |
          yarn workspace @sparc/api-gateway run build
          yarn workspace @sparc/auth-service run build
          yarn workspace @sparc/tenant-service run build
          yarn workspace @sparc/access-control-service run build
          yarn workspace @sparc/device-management-service run build
          yarn workspace @sparc/video-management-service run build
          yarn workspace @sparc/event-processing-service run build
          yarn workspace @sparc/analytics-service run build
          yarn workspace @sparc/reporting-service run build
          yarn workspace @sparc/mobile-credential-service run build
          yarn workspace @sparc/visitor-management-service run build
          yarn workspace @sparc/environmental-service run build
          yarn workspace @sparc/alert-service run build
          yarn workspace @sparc/integration-service run build
          yarn workspace @sparc/backup-recovery-service run build
          yarn workspace @sparc/security-compliance-service run build
          yarn workspace @sparc/maintenance-service run build
          yarn workspace @sparc/elevator-control-service run build
          yarn workspace @sparc/api-documentation-service run build
          yarn workspace @sparc/testing-infrastructure-service run build

      - name: Build frontend
        run: yarn workspace @sparc/web run build

      - name: Validate build artifacts
        run: |
          # Check that all services have dist directories
          for service in api-gateway auth-service tenant-service access-control-service device-management-service video-management-service event-processing-service analytics-service reporting-service mobile-credential-service visitor-management-service environmental-service alert-service integration-service backup-recovery-service security-compliance-service maintenance-service elevator-control-service api-documentation-service testing-infrastructure-service; do
            if [ ! -d "services/$service/dist" ]; then
              echo "Build failed: services/$service/dist not found"
              exit 1
            fi
          done
          
          # Check frontend build
          if [ ! -d "web/.next" ]; then
            echo "Build failed: web/.next not found"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.node-version }}
          path: |
            services/*/dist/
            packages/*/dist/
            web/.next/
          retention-days: 7

  # Job 8: Docker Build Validation
  docker-build:
    name: Docker Build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [build-validation]
    
    strategy:
      matrix:
        service: [
          'api-gateway',
          'auth-service', 
          'tenant-service',
          'access-control-service',
          'video-management-service',
          'alert-service',
          'integration-service',
          'backup-recovery-service',
          'security-compliance-service',
          'maintenance-service',
          'elevator-control-service',
          'api-documentation-service',
          'testing-infrastructure-service',
          'web'
        ]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image - ${{ matrix.service }}
        run: |
          if [ "${{ matrix.service }}" = "web" ]; then
            docker build -f web/Dockerfile -t sparc-${{ matrix.service }}:test .
          else
            docker build -f services/${{ matrix.service }}/Dockerfile -t sparc-${{ matrix.service }}:test .
          fi

      - name: Test Docker image
        run: |
          # Basic smoke test - ensure container starts
          docker run --rm -d --name test-${{ matrix.service }} sparc-${{ matrix.service }}:test
          sleep 10
          docker logs test-${{ matrix.service }}
          docker stop test-${{ matrix.service }} || true

  # Job 9: Code Quality Analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [lint-and-typecheck, unit-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Download test coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          merge-multiple: true
          path: ./coverage-reports

      - name: Run SonarCloud analysis
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=sparc-platform
            -Dsonar.organization=sparc-org
            -Dsonar.javascript.lcov.reportPaths=coverage-reports/**/lcov.info
            -Dsonar.coverage.exclusions=**/*.test.ts,**/*.spec.ts,**/test/**,**/tests/**
            -Dsonar.typescript.node=20

      - name: Run complexity analysis
        run: |
          npx complexity-report --output complexity-report.json --format json src/
          npx jscpd --reporters json --output ./jscpd-report.json .
        continue-on-error: true

      - name: Upload code quality reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-quality-reports
          path: |
            complexity-report.json
            jscpd-report.json
          retention-days: 7

  # Job 10: Final Status Check
  ci-status:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [
      security-scan,
      lint-and-typecheck,
      unit-tests,
      integration-tests,
      e2e-tests,
      performance-tests,
      build-validation,
      docker-build,
      code-quality
    ]
    if: always()
    
    steps:
      - name: Check CI Results
        run: |
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Lint & Type Check: ${{ needs.lint-and-typecheck.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Performance Tests: ${{ needs.performance-tests.result }}"
          echo "Build Validation: ${{ needs.build-validation.result }}"
          echo "Docker Build: ${{ needs.docker-build.result }}"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          
          # Fail if any critical jobs failed
          if [[ "${{ needs.lint-and-typecheck.result }}" == "failure" || 
                "${{ needs.unit-tests.result }}" == "failure" || 
                "${{ needs.build-validation.result }}" == "failure" ]]; then
            echo "Critical CI jobs failed"
            exit 1
          fi
          
          # Warn if non-critical jobs failed
          if [[ "${{ needs.security-scan.result }}" == "failure" || 
                "${{ needs.integration-tests.result }}" == "failure" || 
                "${{ needs.e2e-tests.result }}" == "failure" || 
                "${{ needs.performance-tests.result }}" == "failure" || 
                "${{ needs.docker-build.result }}" == "failure" || 
                "${{ needs.code-quality.result }}" == "failure" ]]; then
            echo "Some non-critical CI jobs failed - review required"
            exit 0
          fi
          
          echo "All CI jobs completed successfully"

      - name: Generate CI Summary
        run: |
          echo "## CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Type Check | ${{ needs.lint-and-typecheck.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Tests | ${{ needs.performance-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Validation | ${{ needs.build-validation.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker-build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
