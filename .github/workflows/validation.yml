name: Comprehensive Validation Suite

on:
  # Trigger on pushes to main and develop branches
  push:
    branches: [ main, develop ]
  
  # Trigger on pull requests to main
  pull_request:
    branches: [ main ]
  
  # Scheduled validation runs (daily at 2 AM UTC)
  schedule:
    - cron: '0 2 * * *'
  
  # Manual trigger for on-demand validation
  workflow_dispatch:
    inputs:
      validation_scope:
        description: 'Validation scope to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - requirements-only
          - performance-only
          - security-only
          - compliance-only

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  AWS_REGION: 'us-east-1'
  VALIDATION_ENVIRONMENT: 'validation'

jobs:
  # Pre-validation setup and environment preparation
  setup:
    name: Setup Validation Environment
    runs-on: ubuntu-latest
    outputs:
      validation-id: ${{ steps.generate-id.outputs.validation-id }}
      test-environment: ${{ steps.setup-env.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate validation ID
        id: generate-id
        run: |
          VALIDATION_ID="val-$(date +%Y%m%d-%H%M%S)-$(echo $GITHUB_SHA | cut -c1-8)"
          echo "validation-id=$VALIDATION_ID" >> $GITHUB_OUTPUT
          echo "Generated validation ID: $VALIDATION_ID"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          pip install -r requirements.txt

      - name: Setup test environment
        id: setup-env
        run: |
          echo "environment=validation-${{ steps.generate-id.outputs.validation-id }}" >> $GITHUB_OUTPUT
          ./scripts/setup-validation-environment.sh

      - name: Cache validation artifacts
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/pip
            validation-cache
          key: validation-${{ runner.os }}-${{ hashFiles('**/package-lock.json', '**/requirements.txt') }}

  # Requirements validation - verify all 28 requirements are implemented
  requirements-validation:
    name: Requirements Validation
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ github.event.inputs.validation_scope == 'full' || github.event.inputs.validation_scope == 'requirements-only' || github.event.inputs.validation_scope == '' }}
    strategy:
      matrix:
        requirement-group: [
          'access-control',
          'video-management', 
          'environmental-monitoring',
          'visitor-management',
          'mobile-credentials',
          'integration-apis',
          'compliance-security',
          'scalability-performance'
        ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run requirements validation tests
        run: |
          npm run test:validation:requirements -- --group=${{ matrix.requirement-group }}
          
      - name: Generate requirements validation report
        run: |
          npm run validation:report:requirements -- --group=${{ matrix.requirement-group }} --output=reports/requirements-${{ matrix.requirement-group }}.json

      - name: Upload requirements validation artifacts
        uses: actions/upload-artifact@v3
        with:
          name: requirements-validation-${{ matrix.requirement-group }}
          path: |
            reports/requirements-${{ matrix.requirement-group }}.json
            test-results/requirements-${{ matrix.requirement-group }}/

  # End-to-end validation testing
  e2e-validation:
    name: End-to-End Validation
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ github.event.inputs.validation_scope == 'full' || github.event.inputs.validation_scope == 'requirements-only' || github.event.inputs.validation_scope == '' }}
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        scenario: [
          'multi-tenant-isolation',
          'offline-resilience',
          'real-time-events',
          'video-streaming',
          'mobile-credentials',
          'visitor-workflows'
        ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Start validation environment
        run: |
          docker-compose -f docker-compose.validation.yml up -d
          ./scripts/wait-for-services.sh

      - name: Run E2E validation tests
        run: |
          npm run test:e2e:validation -- --browser=${{ matrix.browser }} --scenario=${{ matrix.scenario }}

      - name: Generate E2E validation report
        if: always()
        run: |
          npm run validation:report:e2e -- --browser=${{ matrix.browser }} --scenario=${{ matrix.scenario }}

      - name: Upload E2E test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-validation-${{ matrix.browser }}-${{ matrix.scenario }}
          path: |
            test-results/e2e-validation/
            screenshots/
            videos/

  # Performance and scalability validation
  performance-validation:
    name: Performance Validation
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ github.event.inputs.validation_scope == 'full' || github.event.inputs.validation_scope == 'performance-only' || github.event.inputs.validation_scope == '' }}
    strategy:
      matrix:
        test-type: [
          'scalability-10k-doors',
          'video-streaming-1k-concurrent',
          'database-performance',
          'api-load-testing',
          'real-time-events-load'
        ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup performance testing environment
        run: |
          docker-compose -f docker-compose.performance.yml up -d
          ./scripts/setup-performance-environment.sh

      - name: Run performance validation tests
        run: |
          npm run test:performance:validation -- --type=${{ matrix.test-type }}

      - name: Generate performance report
        if: always()
        run: |
          npm run validation:report:performance -- --type=${{ matrix.test-type }}

      - name: Upload performance artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-validation-${{ matrix.test-type }}
          path: |
            reports/performance-${{ matrix.test-type }}.json
            performance-logs/
            metrics/

  # Security validation and penetration testing
  security-validation:
    name: Security Validation
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ github.event.inputs.validation_scope == 'full' || github.event.inputs.validation_scope == 'security-only' || github.event.inputs.validation_scope == '' }}
    strategy:
      matrix:
        security-test: [
          'authentication-bypass',
          'sql-injection',
          'xss-csrf',
          'api-security',
          'multi-tenant-isolation',
          'encryption-validation',
          'network-security'
        ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python for security tools
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          pip install -r requirements-security.txt

      - name: Setup security testing environment
        run: |
          docker-compose -f docker-compose.security.yml up -d
          ./scripts/setup-security-environment.sh

      - name: Run security validation tests
        run: |
          npm run test:security:validation -- --test=${{ matrix.security-test }}

      - name: Run OWASP ZAP scan
        if: matrix.security-test == 'api-security'
        run: |
          docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-api-scan.py \
            -t http://localhost:3000/api/openapi.json \
            -f openapi \
            -r security-scan-report.html

      - name: Generate security report
        if: always()
        run: |
          npm run validation:report:security -- --test=${{ matrix.security-test }}

      - name: Upload security artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-validation-${{ matrix.security-test }}
          path: |
            reports/security-${{ matrix.security-test }}.json
            security-scan-report.html
            security-logs/

  # Compliance validation (SOX, HIPAA, PCI-DSS)
  compliance-validation:
    name: Compliance Validation
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ github.event.inputs.validation_scope == 'full' || github.event.inputs.validation_scope == 'compliance-only' || github.event.inputs.validation_scope == '' }}
    strategy:
      matrix:
        compliance-standard: ['sox', 'hipaa', 'pci-dss']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup compliance testing environment
        run: |
          docker-compose -f docker-compose.compliance.yml up -d
          ./scripts/setup-compliance-environment.sh

      - name: Run compliance validation tests
        run: |
          npm run test:compliance:validation -- --standard=${{ matrix.compliance-standard }}

      - name: Validate audit logging
        run: |
          npm run test:audit:validation -- --standard=${{ matrix.compliance-standard }}

      - name: Validate data retention policies
        run: |
          npm run test:retention:validation -- --standard=${{ matrix.compliance-standard }}

      - name: Generate compliance report
        if: always()
        run: |
          npm run validation:report:compliance -- --standard=${{ matrix.compliance-standard }}

      - name: Upload compliance artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: compliance-validation-${{ matrix.compliance-standard }}
          path: |
            reports/compliance-${{ matrix.compliance-standard }}.json
            audit-logs/
            compliance-evidence/

  # Offline resilience and mesh networking validation
  offline-validation:
    name: Offline Resilience Validation
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ github.event.inputs.validation_scope == 'full' || github.event.inputs.validation_scope == 'requirements-only' || github.event.inputs.validation_scope == '' }}
    strategy:
      matrix:
        offline-scenario: [
          '72-hour-operation',
          'mesh-networking',
          'credential-revocation',
          'data-synchronization',
          'conflict-resolution'
        ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup offline testing environment
        run: |
          docker-compose -f docker-compose.offline.yml up -d
          ./scripts/setup-offline-environment.sh

      - name: Run offline validation tests
        run: |
          npm run test:offline:validation -- --scenario=${{ matrix.offline-scenario }}

      - name: Generate offline validation report
        if: always()
        run: |
          npm run validation:report:offline -- --scenario=${{ matrix.offline-scenario }}

      - name: Upload offline validation artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: offline-validation-${{ matrix.offline-scenario }}
          path: |
            reports/offline-${{ matrix.offline-scenario }}.json
            offline-logs/
            mesh-network-data/

  # Comprehensive validation report generation
  generate-validation-report:
    name: Generate Comprehensive Validation Report
    runs-on: ubuntu-latest
    needs: [
      setup,
      requirements-validation,
      e2e-validation,
      performance-validation,
      security-validation,
      compliance-validation,
      offline-validation
    ]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all validation artifacts
        uses: actions/download-artifact@v3
        with:
          path: validation-artifacts/

      - name: Generate comprehensive validation report
        run: |
          npm run validation:report:comprehensive -- \
            --validation-id=${{ needs.setup.outputs.validation-id }} \
            --artifacts-path=validation-artifacts/ \
            --output=comprehensive-validation-report.html

      - name: Generate validation summary
        run: |
          npm run validation:summary -- \
            --validation-id=${{ needs.setup.outputs.validation-id }} \
            --artifacts-path=validation-artifacts/ \
            --output=validation-summary.json

      - name: Check validation status
        id: validation-status
        run: |
          VALIDATION_STATUS=$(npm run validation:status -- --summary=validation-summary.json)
          echo "status=$VALIDATION_STATUS" >> $GITHUB_OUTPUT
          echo "Validation Status: $VALIDATION_STATUS"

      - name: Upload comprehensive validation report
        uses: actions/upload-artifact@v3
        with:
          name: comprehensive-validation-report-${{ needs.setup.outputs.validation-id }}
          path: |
            comprehensive-validation-report.html
            validation-summary.json
            validation-artifacts/

      - name: Publish validation results to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./validation-reports
          destination_dir: validation/${{ needs.setup.outputs.validation-id }}

  # Notification and alerting
  notify-validation-results:
    name: Notify Validation Results
    runs-on: ubuntu-latest
    needs: [setup, generate-validation-report]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download validation summary
        uses: actions/download-artifact@v3
        with:
          name: comprehensive-validation-report-${{ needs.setup.outputs.validation-id }}
          path: validation-results/

      - name: Send Slack notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.generate-validation-report.outputs.status || 'failure' }}
          channel: '#sparc-validation'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: |
            {
              "validation_id": "${{ needs.setup.outputs.validation-id }}",
              "trigger": "${{ github.event_name }}",
              "branch": "${{ github.ref_name }}",
              "commit": "${{ github.sha }}",
              "report_url": "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/validation/${{ needs.setup.outputs.validation-id }}"
            }

      - name: Send email notification
        if: failure() || (github.event_name == 'schedule')
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "SPARC Platform Validation Results - ${{ needs.setup.outputs.validation-id }}"
          to: ${{ secrets.VALIDATION_NOTIFICATION_EMAIL }}
          from: "SPARC Validation <noreply@sparc-platform.com>"
          html_body: |
            <h2>SPARC Platform Validation Results</h2>
            <p><strong>Validation ID:</strong> ${{ needs.setup.outputs.validation-id }}</p>
            <p><strong>Status:</strong> ${{ needs.generate-validation-report.outputs.status || 'FAILED' }}</p>
            <p><strong>Trigger:</strong> ${{ github.event_name }}</p>
            <p><strong>Branch:</strong> ${{ github.ref_name }}</p>
            <p><strong>Commit:</strong> ${{ github.sha }}</p>
            <p><strong>Report:</strong> <a href="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/validation/${{ needs.setup.outputs.validation-id }}">View Detailed Report</a></p>
          attachments: validation-results/validation-summary.json

  # Cleanup validation environment
  cleanup:
    name: Cleanup Validation Environment
    runs-on: ubuntu-latest
    needs: [setup, notify-validation-results]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cleanup validation environment
        run: |
          ./scripts/cleanup-validation-environment.sh ${{ needs.setup.outputs.test-environment }}

      - name: Archive validation logs
        run: |
          ./scripts/archive-validation-logs.sh ${{ needs.setup.outputs.validation-id }}

      - name: Update validation metrics
        run: |
          ./scripts/update-validation-metrics.sh ${{ needs.setup.outputs.validation-id }}