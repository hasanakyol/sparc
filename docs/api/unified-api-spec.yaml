openapi: 3.0.3
info:
  title: SPARC Platform Unified API
  description: |
    Comprehensive API specification for the SPARC (Security Platform with Advanced Real-time Control) system.
    This unified specification covers all 24 microservices providing access control, video management, 
    environmental monitoring, visitor management, mobile credentials, and compliance features.
    
    ## Key Features
    - Multi-tenant architecture with tenant isolation
    - Real-time event processing and notifications
    - Offline resilience with 72-hour operation capability
    - Scalable to 10,000 doors and 1,000 concurrent video streams
    - SOX, HIPAA, and PCI-DSS compliance
    - Mobile credential management with mesh networking
    - Advanced analytics and reporting
    
    ## Authentication
    All endpoints require JWT authentication with tenant-specific scoping.
    Include the `Authorization: Bearer <token>` header and `X-Tenant-ID` header in all requests.
    
    ## Multi-Tenant Usage
    All API endpoints are tenant-scoped. Include the `X-Tenant-ID` header to specify the tenant context.
    Data isolation is enforced at the database and application levels.
  version: 1.0.0
  contact:
    name: SPARC Platform API Support
    email: api-support@sparc-platform.com
  license:
    name: Proprietary
    url: https://sparc-platform.com/license

servers:
  - url: https://api.sparc-platform.com/v1
    description: Production API Server
  - url: https://staging-api.sparc-platform.com/v1
    description: Staging API Server
  - url: https://dev-api.sparc-platform.com/v1
    description: Development API Server

security:
  - BearerAuth: []
  - TenantHeader: []

paths:
  # Authentication Service
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User authentication
      description: Authenticate user credentials and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: admin@company.com
              password: securePassword123
              tenantId: tenant-123
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimited'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      responses:
        '200':
          description: Logout successful
        '401':
          $ref: '#/components/responses/Unauthorized'

  # User Management Service
  /users:
    get:
      tags:
        - User Management
      summary: List users
      description: Retrieve paginated list of users for the tenant
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: role
          in: query
          schema:
            type: string
            enum: [admin, operator, viewer, security_officer]
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, suspended]
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      tags:
        - User Management
      summary: Create new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /users/{userId}:
    get:
      tags:
        - User Management
      summary: Get user details
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '200':
          description: User details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - User Management
      summary: Update user
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - User Management
      summary: Delete user
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '204':
          description: User deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'

  # Access Control Service
  /access-control/doors:
    get:
      tags:
        - Access Control
      summary: List access doors
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: building
          in: query
          schema:
            type: string
        - name: floor
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [online, offline, maintenance, error]
      responses:
        '200':
          description: Doors retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DoorListResponse'

    post:
      tags:
        - Access Control
      summary: Create new door
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDoorRequest'
      responses:
        '201':
          description: Door created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Door'

  /access-control/doors/{doorId}:
    get:
      tags:
        - Access Control
      summary: Get door details
      parameters:
        - $ref: '#/components/parameters/DoorIdParam'
      responses:
        '200':
          description: Door details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Door'

    put:
      tags:
        - Access Control
      summary: Update door configuration
      parameters:
        - $ref: '#/components/parameters/DoorIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDoorRequest'
      responses:
        '200':
          description: Door updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Door'

  /access-control/doors/{doorId}/unlock:
    post:
      tags:
        - Access Control
      summary: Unlock door remotely
      parameters:
        - $ref: '#/components/parameters/DoorIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  description: Reason for remote unlock
                duration:
                  type: integer
                  description: Unlock duration in seconds (default 5)
                  minimum: 1
                  maximum: 300
      responses:
        '200':
          description: Door unlocked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessEvent'

  /access-control/access-events:
    get:
      tags:
        - Access Control
      summary: List access events
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: doorId
          in: query
          schema:
            type: string
        - name: userId
          in: query
          schema:
            type: string
        - name: eventType
          in: query
          schema:
            type: string
            enum: [granted, denied, forced, propped, timeout]
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Access events retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessEventListResponse'

  # Video Management Service
  /video/cameras:
    get:
      tags:
        - Video Management
      summary: List cameras
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: location
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [online, offline, recording, maintenance, error]
        - name: type
          in: query
          schema:
            type: string
            enum: [fixed, ptz, thermal, analytics]
      responses:
        '200':
          description: Cameras retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CameraListResponse'

    post:
      tags:
        - Video Management
      summary: Add new camera
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCameraRequest'
      responses:
        '201':
          description: Camera added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Camera'

  /video/cameras/{cameraId}:
    get:
      tags:
        - Video Management
      summary: Get camera details
      parameters:
        - $ref: '#/components/parameters/CameraIdParam'
      responses:
        '200':
          description: Camera details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Camera'

    put:
      tags:
        - Video Management
      summary: Update camera configuration
      parameters:
        - $ref: '#/components/parameters/CameraIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCameraRequest'
      responses:
        '200':
          description: Camera updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Camera'

  /video/cameras/{cameraId}/stream:
    get:
      tags:
        - Video Management
      summary: Get camera live stream URL
      parameters:
        - $ref: '#/components/parameters/CameraIdParam'
        - name: quality
          in: query
          schema:
            type: string
            enum: [low, medium, high, ultra]
            default: medium
      responses:
        '200':
          description: Stream URL retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  streamUrl:
                    type: string
                    format: uri
                  protocol:
                    type: string
                    enum: [rtsp, webrtc, hls]
                  expiresAt:
                    type: string
                    format: date-time

  /video/recordings:
    get:
      tags:
        - Video Management
      summary: List video recordings
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: cameraId
          in: query
          schema:
            type: string
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - name: eventType
          in: query
          schema:
            type: string
            enum: [motion, access_event, alarm, manual]
      responses:
        '200':
          description: Recordings retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordingListResponse'

  /video/recordings/{recordingId}:
    get:
      tags:
        - Video Management
      summary: Get recording details and playback URL
      parameters:
        - name: recordingId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Recording details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recording'

  # Environmental Monitoring Service
  /environmental/sensors:
    get:
      tags:
        - Environmental Monitoring
      summary: List environmental sensors
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: type
          in: query
          schema:
            type: string
            enum: [temperature, humidity, air_quality, motion, smoke, flood, vibration]
        - name: location
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [online, offline, alarm, maintenance, error]
      responses:
        '200':
          description: Sensors retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SensorListResponse'

    post:
      tags:
        - Environmental Monitoring
      summary: Add new sensor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSensorRequest'
      responses:
        '201':
          description: Sensor added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sensor'

  /environmental/sensors/{sensorId}/readings:
    get:
      tags:
        - Environmental Monitoring
      summary: Get sensor readings
      parameters:
        - name: sensorId
          in: path
          required: true
          schema:
            type: string
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - name: interval
          in: query
          schema:
            type: string
            enum: [1m, 5m, 15m, 1h, 1d]
            default: 5m
      responses:
        '200':
          description: Sensor readings retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SensorReadingListResponse'

    post:
      tags:
        - Environmental Monitoring
      summary: Submit sensor reading
      parameters:
        - name: sensorId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SensorReading'
      responses:
        '201':
          description: Reading recorded successfully
        '400':
          $ref: '#/components/responses/BadRequest'

  # Visitor Management Service
  /visitors:
    get:
      tags:
        - Visitor Management
      summary: List visitors
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, approved, checked_in, checked_out, expired, denied]
        - name: visitDate
          in: query
          schema:
            type: string
            format: date
        - name: hostId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Visitors retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VisitorListResponse'

    post:
      tags:
        - Visitor Management
      summary: Register new visitor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVisitorRequest'
      responses:
        '201':
          description: Visitor registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visitor'

  /visitors/{visitorId}/check-in:
    post:
      tags:
        - Visitor Management
      summary: Check in visitor
      parameters:
        - name: visitorId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                locationId:
                  type: string
                  description: Check-in location
                photo:
                  type: string
                  format: base64
                  description: Visitor photo for verification
      responses:
        '200':
          description: Visitor checked in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VisitorCheckIn'

  # Mobile Credentials Service
  /mobile-credentials:
    get:
      tags:
        - Mobile Credentials
      summary: List mobile credentials
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: userId
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [active, suspended, revoked, expired]
        - name: deviceType
          in: query
          schema:
            type: string
            enum: [ios, android, nfc_card, bluetooth_beacon]
      responses:
        '200':
          description: Mobile credentials retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MobileCredentialListResponse'

    post:
      tags:
        - Mobile Credentials
      summary: Issue new mobile credential
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMobileCredentialRequest'
      responses:
        '201':
          description: Mobile credential issued successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MobileCredential'

  /mobile-credentials/{credentialId}/revoke:
    post:
      tags:
        - Mobile Credentials
      summary: Revoke mobile credential
      parameters:
        - name: credentialId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  description: Reason for revocation
                propagateOffline:
                  type: boolean
                  description: Whether to propagate to offline mesh network
                  default: true
      responses:
        '200':
          description: Credential revoked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  revokedAt:
                    type: string
                    format: date-time
                  propagationStatus:
                    type: string
                    enum: [pending, propagated, failed]

  # Notification Service
  /notifications:
    get:
      tags:
        - Notifications
      summary: List notifications
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: type
          in: query
          schema:
            type: string
            enum: [security_alert, system_alert, access_denied, environmental_alarm, maintenance]
        - name: priority
          in: query
          schema:
            type: string
            enum: [low, medium, high, critical]
        - name: status
          in: query
          schema:
            type: string
            enum: [unread, read, acknowledged, resolved]
      responses:
        '200':
          description: Notifications retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationListResponse'

    post:
      tags:
        - Notifications
      summary: Create notification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNotificationRequest'
      responses:
        '201':
          description: Notification created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'

  /notifications/{notificationId}/acknowledge:
    post:
      tags:
        - Notifications
      summary: Acknowledge notification
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Notification acknowledged successfully

  # Analytics Service
  /analytics/dashboard:
    get:
      tags:
        - Analytics
      summary: Get dashboard metrics
      parameters:
        - name: timeRange
          in: query
          schema:
            type: string
            enum: [1h, 24h, 7d, 30d, 90d]
            default: 24h
        - name: metrics
          in: query
          schema:
            type: array
            items:
              type: string
              enum: [access_events, video_streams, environmental_readings, alerts, system_health]
      responses:
        '200':
          description: Dashboard metrics retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardMetrics'

  /analytics/reports:
    get:
      tags:
        - Analytics
      summary: List available reports
      responses:
        '200':
          description: Available reports retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportTemplate'

    post:
      tags:
        - Analytics
      summary: Generate custom report
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateReportRequest'
      responses:
        '202':
          description: Report generation started
          content:
            application/json:
              schema:
                type: object
                properties:
                  reportId:
                    type: string
                  status:
                    type: string
                    enum: [pending, processing, completed, failed]
                  estimatedCompletion:
                    type: string
                    format: date-time

  # Compliance Service
  /compliance/audit-logs:
    get:
      tags:
        - Compliance
      summary: Retrieve audit logs
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: action
          in: query
          schema:
            type: string
        - name: userId
          in: query
          schema:
            type: string
        - name: resourceType
          in: query
          schema:
            type: string
            enum: [user, door, camera, sensor, visitor, credential]
      responses:
        '200':
          description: Audit logs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogListResponse'

  /compliance/data-retention:
    get:
      tags:
        - Compliance
      summary: Get data retention policies
      responses:
        '200':
          description: Data retention policies retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataRetentionPolicies'

    put:
      tags:
        - Compliance
      summary: Update data retention policies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDataRetentionRequest'
      responses:
        '200':
          description: Data retention policies updated successfully

  # Alert Service
  /alerts:
    get:
      tags:
        - Alert Service
      summary: List alerts
      description: Retrieve paginated list of alerts with filtering options
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: priority
          in: query
          schema:
            type: string
            enum: [low, medium, high, critical]
        - name: status
          in: query
          schema:
            type: string
            enum: [active, acknowledged, resolved, escalated]
        - name: alertType
          in: query
          schema:
            type: string
            enum: [security, environmental, system, access_denied, maintenance]
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Alerts retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertListResponse'

    post:
      tags:
        - Alert Service
      summary: Create new alert
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlertRequest'
      responses:
        '201':
          description: Alert created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'

  /alerts/{alertId}:
    get:
      tags:
        - Alert Service
      summary: Get alert details
      parameters:
        - name: alertId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Alert details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'

    put:
      tags:
        - Alert Service
      summary: Update alert
      parameters:
        - name: alertId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlertRequest'
      responses:
        '200':
          description: Alert updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'

  /alerts/{alertId}/acknowledge:
    post:
      tags:
        - Alert Service
      summary: Acknowledge alert
      parameters:
        - name: alertId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                acknowledgedBy:
                  type: string
                notes:
                  type: string
      responses:
        '200':
          description: Alert acknowledged successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'

  /alerts/{alertId}/escalate:
    post:
      tags:
        - Alert Service
      summary: Escalate alert
      parameters:
        - name: alertId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                escalationLevel:
                  type: string
                  enum: [level1, level2, level3, emergency]
                reason:
                  type: string
                assignedTo:
                  type: string
      responses:
        '200':
          description: Alert escalated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'

  /alerts/escalation-rules:
    get:
      tags:
        - Alert Service
      summary: Get escalation rules
      responses:
        '200':
          description: Escalation rules retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EscalationRules'

    put:
      tags:
        - Alert Service
      summary: Update escalation rules
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEscalationRulesRequest'
      responses:
        '200':
          description: Escalation rules updated successfully

  # Integration Service
  /integrations:
    get:
      tags:
        - Integration Service
      summary: List integrations
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: type
          in: query
          schema:
            type: string
            enum: [ldap, active_directory, hvac, fire_safety, elevator, visitor_system, calendar]
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, error, syncing]
      responses:
        '200':
          description: Integrations retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationListResponse'

    post:
      tags:
        - Integration Service
      summary: Create new integration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIntegrationRequest'
      responses:
        '201':
          description: Integration created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integration'

  /integrations/{integrationId}:
    get:
      tags:
        - Integration Service
      summary: Get integration details
      parameters:
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Integration details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integration'

    put:
      tags:
        - Integration Service
      summary: Update integration
      parameters:
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateIntegrationRequest'
      responses:
        '200':
          description: Integration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integration'

    delete:
      tags:
        - Integration Service
      summary: Delete integration
      parameters:
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Integration deleted successfully

  /integrations/{integrationId}/sync:
    post:
      tags:
        - Integration Service
      summary: Trigger manual synchronization
      parameters:
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                syncType:
                  type: string
                  enum: [full, incremental, users_only, groups_only]
                  default: incremental
      responses:
        '202':
          description: Synchronization started
          content:
            application/json:
              schema:
                type: object
                properties:
                  syncJobId:
                    type: string
                  status:
                    type: string
                    enum: [pending, running, completed, failed]

  /integrations/webhooks:
    get:
      tags:
        - Integration Service
      summary: List webhooks
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: eventType
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Webhooks retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookListResponse'

    post:
      tags:
        - Integration Service
      summary: Create webhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWebhookRequest'
      responses:
        '201':
          description: Webhook created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'

  /integrations/ldap/test-connection:
    post:
      tags:
        - Integration Service
      summary: Test LDAP/AD connection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LDAPConnectionTest'
      responses:
        '200':
          description: Connection test successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  userCount:
                    type: integer
                  groupCount:
                    type: integer

  # Backup & Recovery Service
  /backup/jobs:
    get:
      tags:
        - Backup & Recovery Service
      summary: List backup jobs
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: type
          in: query
          schema:
            type: string
            enum: [full, incremental, configuration, video, logs]
        - name: status
          in: query
          schema:
            type: string
            enum: [scheduled, running, completed, failed, cancelled]
      responses:
        '200':
          description: Backup jobs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupJobListResponse'

    post:
      tags:
        - Backup & Recovery Service
      summary: Create backup job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBackupJobRequest'
      responses:
        '201':
          description: Backup job created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupJob'

  /backup/jobs/{jobId}:
    get:
      tags:
        - Backup & Recovery Service
      summary: Get backup job details
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Backup job details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupJob'

    delete:
      tags:
        - Backup & Recovery Service
      summary: Cancel backup job
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Backup job cancelled successfully

  /backup/restore:
    post:
      tags:
        - Backup & Recovery Service
      summary: Initiate restore operation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestoreRequest'
      responses:
        '202':
          description: Restore operation initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  restoreId:
                    type: string
                  status:
                    type: string
                    enum: [pending, running, completed, failed]
                  estimatedCompletion:
                    type: string
                    format: date-time

  /backup/disaster-recovery/status:
    get:
      tags:
        - Backup & Recovery Service
      summary: Get disaster recovery status
      responses:
        '200':
          description: Disaster recovery status retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisasterRecoveryStatus'

  /backup/disaster-recovery/failover:
    post:
      tags:
        - Backup & Recovery Service
      summary: Initiate failover
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                targetRegion:
                  type: string
                reason:
                  type: string
                forceFailover:
                  type: boolean
                  default: false
      responses:
        '202':
          description: Failover initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  failoverId:
                    type: string
                  status:
                    type: string
                    enum: [pending, running, completed, failed]

  # Security & Compliance Service
  /security/certificates:
    get:
      tags:
        - Security & Compliance Service
      summary: List certificates
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: type
          in: query
          schema:
            type: string
            enum: [ssl, device, ca, client]
        - name: status
          in: query
          schema:
            type: string
            enum: [valid, expiring, expired, revoked]
      responses:
        '200':
          description: Certificates retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateListResponse'

    post:
      tags:
        - Security & Compliance Service
      summary: Request new certificate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCertificateRequest'
      responses:
        '201':
          description: Certificate request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'

  /security/certificates/{certificateId}/renew:
    post:
      tags:
        - Security & Compliance Service
      summary: Renew certificate
      parameters:
        - name: certificateId
          in: path
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Certificate renewal initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'

  /security/threats:
    get:
      tags:
        - Security & Compliance Service
      summary: List security threats
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: severity
          in: query
          schema:
            type: string
            enum: [low, medium, high, critical]
        - name: status
          in: query
          schema:
            type: string
            enum: [active, investigating, resolved, false_positive]
        - name: threatType
          in: query
          schema:
            type: string
            enum: [malware, intrusion, ddos, unauthorized_access, data_breach]
      responses:
        '200':
          description: Security threats retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThreatListResponse'

  /security/incidents:
    get:
      tags:
        - Security & Compliance Service
      summary: List security incidents
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: severity
          in: query
          schema:
            type: string
            enum: [low, medium, high, critical]
        - name: status
          in: query
          schema:
            type: string
            enum: [open, investigating, resolved, closed]
      responses:
        '200':
          description: Security incidents retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentListResponse'

    post:
      tags:
        - Security & Compliance Service
      summary: Create security incident
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIncidentRequest'
      responses:
        '201':
          description: Security incident created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityIncident'

  /security/compliance/reports:
    get:
      tags:
        - Security & Compliance Service
      summary: List compliance reports
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: framework
          in: query
          schema:
            type: string
            enum: [sox, hipaa, pci_dss, gdpr, ccpa, iso27001]
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, pending, completed, failed]
      responses:
        '200':
          description: Compliance reports retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComplianceReportListResponse'

    post:
      tags:
        - Security & Compliance Service
      summary: Generate compliance report
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateComplianceReportRequest'
      responses:
        '202':
          description: Compliance report generation started
          content:
            application/json:
              schema:
                type: object
                properties:
                  reportId:
                    type: string
                  status:
                    type: string
                    enum: [pending, generating, completed, failed]

  # Maintenance Service
  /maintenance/work-orders:
    get:
      tags:
        - Maintenance Service
      summary: List work orders
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: status
          in: query
          schema:
            type: string
            enum: [open, assigned, in_progress, completed, cancelled]
        - name: priority
          in: query
          schema:
            type: string
            enum: [low, medium, high, urgent]
        - name: type
          in: query
          schema:
            type: string
            enum: [preventive, corrective, emergency, inspection]
        - name: assignedTo
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Work orders retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkOrderListResponse'

    post:
      tags:
        - Maintenance Service
      summary: Create work order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkOrderRequest'
      responses:
        '201':
          description: Work order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkOrder'

  /maintenance/work-orders/{workOrderId}:
    get:
      tags:
        - Maintenance Service
      summary: Get work order details
      parameters:
        - name: workOrderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Work order details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkOrder'

    put:
      tags:
        - Maintenance Service
      summary: Update work order
      parameters:
        - name: workOrderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorkOrderRequest'
      responses:
        '200':
          description: Work order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkOrder'

  /maintenance/schedules:
    get:
      tags:
        - Maintenance Service
      summary: List maintenance schedules
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: deviceType
          in: query
          schema:
            type: string
            enum: [door, camera, sensor, panel, reader]
      responses:
        '200':
          description: Maintenance schedules retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaintenanceScheduleListResponse'

    post:
      tags:
        - Maintenance Service
      summary: Create maintenance schedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMaintenanceScheduleRequest'
      responses:
        '201':
          description: Maintenance schedule created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaintenanceSchedule'

  /maintenance/diagnostics/{deviceId}:
    get:
      tags:
        - Maintenance Service
      summary: Get device diagnostics
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
        - name: deviceType
          in: query
          required: true
          schema:
            type: string
            enum: [door, camera, sensor, panel, reader]
      responses:
        '200':
          description: Device diagnostics retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceDiagnostics'

    post:
      tags:
        - Maintenance Service
      summary: Run device diagnostics
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                deviceType:
                  type: string
                  enum: [door, camera, sensor, panel, reader]
                testType:
                  type: string
                  enum: [connectivity, functionality, performance, full]
      responses:
        '202':
          description: Diagnostics started
          content:
            application/json:
              schema:
                type: object
                properties:
                  diagnosticId:
                    type: string
                  status:
                    type: string
                    enum: [pending, running, completed, failed]

  # Elevator Control Service
  /elevators:
    get:
      tags:
        - Elevator Control Service
      summary: List elevators
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: building
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [online, offline, maintenance, emergency, error]
        - name: manufacturer
          in: query
          schema:
            type: string
            enum: [otis, kone, schindler, thyssenkrupp, other]
      responses:
        '200':
          description: Elevators retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElevatorListResponse'

    post:
      tags:
        - Elevator Control Service
      summary: Add new elevator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateElevatorRequest'
      responses:
        '201':
          description: Elevator added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Elevator'

  /elevators/{elevatorId}:
    get:
      tags:
        - Elevator Control Service
      summary: Get elevator details
      parameters:
        - name: elevatorId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Elevator details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Elevator'

    put:
      tags:
        - Elevator Control Service
      summary: Update elevator configuration
      parameters:
        - name: elevatorId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateElevatorRequest'
      responses:
        '200':
          description: Elevator updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Elevator'

  /elevators/{elevatorId}/access-control:
    get:
      tags:
        - Elevator Control Service
      summary: Get elevator access control settings
      parameters:
        - name: elevatorId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Access control settings retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElevatorAccessControl'

    put:
      tags:
        - Elevator Control Service
      summary: Update elevator access control
      parameters:
        - name: elevatorId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateElevatorAccessControlRequest'
      responses:
        '200':
          description: Access control updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElevatorAccessControl'

  /elevators/{elevatorId}/emergency-override:
    post:
      tags:
        - Elevator Control Service
      summary: Activate emergency override
      parameters:
        - name: elevatorId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                overrideType:
                  type: string
                  enum: [evacuation, fire_service, maintenance, security]
                reason:
                  type: string
                duration:
                  type: integer
                  description: Override duration in minutes
                authorizedBy:
                  type: string
      responses:
        '200':
          description: Emergency override activated
          content:
            application/json:
              schema:
                type: object
                properties:
                  overrideId:
                    type: string
                  status:
                    type: string
                    enum: [active, expired, cancelled]
                  activatedAt:
                    type: string
                    format: date-time
                  expiresAt:
                    type: string
                    format: date-time

  # API Documentation Service
  /api-docs/specs:
    get:
      tags:
        - API Documentation Service
      summary: List available API specifications
      responses:
        '200':
          description: API specifications retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/APISpecification'

  /api-docs/specs/{serviceName}:
    get:
      tags:
        - API Documentation Service
      summary: Get OpenAPI specification for service
      parameters:
        - name: serviceName
          in: path
          required: true
          schema:
            type: string
        - name: format
          in: query
          schema:
            type: string
            enum: [json, yaml]
            default: json
      responses:
        '200':
          description: API specification retrieved
          content:
            application/json:
              schema:
                type: object
            application/yaml:
              schema:
                type: string

  /api-docs/sdks:
    get:
      tags:
        - API Documentation Service
      summary: List available SDKs
      responses:
        '200':
          description: Available SDKs retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SDK'

  /api-docs/sdks/generate:
    post:
      tags:
        - API Documentation Service
      summary: Generate SDK
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateSDKRequest'
      responses:
        '202':
          description: SDK generation started
          content:
            application/json:
              schema:
                type: object
                properties:
                  generationId:
                    type: string
                  status:
                    type: string
                    enum: [pending, generating, completed, failed]
                  downloadUrl:
                    type: string
                    format: uri

  /api-docs/sandbox:
    get:
      tags:
        - API Documentation Service
      summary: Get sandbox environment details
      responses:
        '200':
          description: Sandbox details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SandboxEnvironment'

    post:
      tags:
        - API Documentation Service
      summary: Create sandbox environment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                duration:
                  type: integer
                  description: Sandbox duration in hours
      responses:
        '201':
          description: Sandbox environment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SandboxEnvironment'

  # Testing Infrastructure Service
  /testing/test-suites:
    get:
      tags:
        - Testing Infrastructure Service
      summary: List test suites
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: type
          in: query
          schema:
            type: string
            enum: [unit, integration, e2e, load, security, compliance]
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, running, passed, failed, cancelled]
      responses:
        '200':
          description: Test suites retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestSuiteListResponse'

    post:
      tags:
        - Testing Infrastructure Service
      summary: Create test suite
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTestSuiteRequest'
      responses:
        '201':
          description: Test suite created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestSuite'

  /testing/test-suites/{suiteId}/run:
    post:
      tags:
        - Testing Infrastructure Service
      summary: Execute test suite
      parameters:
        - name: suiteId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                environment:
                  type: string
                  enum: [development, staging, production]
                parameters:
                  type: object
      responses:
        '202':
          description: Test execution started
          content:
            application/json:
              schema:
                type: object
                properties:
                  executionId:
                    type: string
                  status:
                    type: string
                    enum: [pending, running, completed, failed]

  /testing/executions/{executionId}:
    get:
      tags:
        - Testing Infrastructure Service
      summary: Get test execution results
      parameters:
        - name: executionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Test execution results retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestExecution'

  /testing/performance/load-test:
    post:
      tags:
        - Testing Infrastructure Service
      summary: Execute load test
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoadTestRequest'
      responses:
        '202':
          description: Load test started
          content:
            application/json:
              schema:
                type: object
                properties:
                  testId:
                    type: string
                  status:
                    type: string
                    enum: [pending, running, completed, failed]

  /testing/security/vulnerability-scan:
    post:
      tags:
        - Testing Infrastructure Service
      summary: Execute vulnerability scan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                target:
                  type: string
                  format: uri
                scanType:
                  type: string
                  enum: [quick, full, custom]
                includeAuthenticated:
                  type: boolean
      responses:
        '202':
          description: Vulnerability scan started
          content:
            application/json:
              schema:
                type: object
                properties:
                  scanId:
                    type: string
                  status:
                    type: string
                    enum: [pending, running, completed, failed]

  # Enhanced Analytics Service
  /analytics/video-analytics:
    get:
      tags:
        - Analytics
      summary: Get video analytics results
      parameters:
        - name: cameraId
          in: query
          schema:
            type: string
        - name: analyticsType
          in: query
          schema:
            type: string
            enum: [face_recognition, license_plate, behavior_analysis, crowd_analysis]
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Video analytics results retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoAnalyticsResults'

  /analytics/behavioral-analysis:
    get:
      tags:
        - Analytics
      summary: Get behavioral analysis insights
      parameters:
        - name: timeRange
          in: query
          schema:
            type: string
            enum: [1h, 24h, 7d, 30d]
        - name: location
          in: query
          schema:
            type: string
        - name: analysisType
          in: query
          schema:
            type: string
            enum: [loitering, tailgating, unusual_patterns, crowd_behavior]
      responses:
        '200':
          description: Behavioral analysis results retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BehavioralAnalysisResults'

  /analytics/predictive:
    get:
      tags:
        - Analytics
      summary: Get predictive analytics
      parameters:
        - name: predictionType
          in: query
          schema:
            type: string
            enum: [security_incidents, maintenance_needs, capacity_planning, risk_assessment]
        - name: timeHorizon
          in: query
          schema:
            type: string
            enum: [1d, 7d, 30d, 90d]
      responses:
        '200':
          description: Predictive analytics retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredictiveAnalytics'

  # Enhanced Environmental Service
  /environmental/hvac-control:
    get:
      tags:
        - Environmental Monitoring
      summary: Get HVAC system status
      parameters:
        - name: building
          in: query
          schema:
            type: string
        - name: zone
          in: query
          schema:
            type: string
      responses:
        '200':
          description: HVAC status retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HVACStatus'

    post:
      tags:
        - Environmental Monitoring
      summary: Control HVAC system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HVACControlRequest'
      responses:
        '200':
          description: HVAC control command executed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HVACControlResponse'

  /environmental/automation-rules:
    get:
      tags:
        - Environmental Monitoring
      summary: List automation rules
      responses:
        '200':
          description: Automation rules retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AutomationRule'

    post:
      tags:
        - Environmental Monitoring
      summary: Create automation rule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAutomationRuleRequest'
      responses:
        '201':
          description: Automation rule created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomationRule'

  # Enhanced Mobile Credentials Service
  /mobile-credentials/mesh-network/status:
    get:
      tags:
        - Mobile Credentials
      summary: Get mesh network status
      responses:
        '200':
          description: Mesh network status retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeshNetworkStatus'

  /mobile-credentials/offline-sync:
    post:
      tags:
        - Mobile Credentials
      summary: Trigger offline synchronization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                syncType:
                  type: string
                  enum: [full, incremental, revocations_only]
                priority:
                  type: string
                  enum: [low, medium, high, emergency]
      responses:
        '202':
          description: Offline synchronization started
          content:
            application/json:
              schema:
                type: object
                properties:
                  syncId:
                    type: string
                  status:
                    type: string
                    enum: [pending, propagating, completed, failed]
                  estimatedCompletion:
                    type: string
                    format: date-time

  # Real-time Events (WebSocket)
  /events/stream:
    get:
      tags:
        - Real-time Events
      summary: WebSocket endpoint for real-time events
      description: |
        WebSocket endpoint for receiving real-time events. 
        Upgrade to WebSocket protocol to receive live events.
        
        Event types include:
        - access_event: Door access attempts
        - video_alert: Video analytics alerts
        - environmental_alert: Environmental sensor alarms
        - system_alert: System health notifications
        - visitor_event: Visitor check-in/out events
        - maintenance_alert: Maintenance notifications
        - security_incident: Security incidents
        - backup_status: Backup job status updates
        - integration_event: Integration sync events
        
        Authentication required via query parameter: ?token=<jwt_token>
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
          description: JWT authentication token
        - name: eventTypes
          in: query
          schema:
            type: array
            items:
              type: string
          description: Filter events by type
      responses:
        '101':
          description: Switching Protocols to WebSocket
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Health Check
  /health:
    get:
      tags:
        - System
      summary: Health check endpoint
      description: Check system health and service status
      security: []
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
        '503':
          description: System is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from /auth/login endpoint
    TenantHeader:
      type: apiKey
      in: header
      name: X-Tenant-ID
      description: Tenant identifier for multi-tenant isolation

  parameters:
    PageParam:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
      description: Page number for pagination

    LimitParam:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: Number of items per page

    UserIdParam:
      name: userId
      in: path
      required: true
      schema:
        type: string
      description: Unique user identifier

    DoorIdParam:
      name: doorId
      in: path
      required: true
      schema:
        type: string
      description: Unique door identifier

    CameraIdParam:
      name: cameraId
      in: path
      required: true
      schema:
        type: string
      description: Unique camera identifier

  schemas:
    # Authentication Schemas
    LoginRequest:
      type: object
      required:
        - email
        - password
        - tenantId
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        tenantId:
          type: string
        mfaCode:
          type: string
          description: Multi-factor authentication code (if enabled)

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token
        refreshToken:
          type: string
          description: Refresh token for token renewal
        expiresIn:
          type: integer
          description: Token expiration time in seconds
        user:
          $ref: '#/components/schemas/User'
        permissions:
          type: array
          items:
            type: string
          description: User permissions within the tenant

    # User Management Schemas
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [admin, operator, viewer, security_officer]
        status:
          type: string
          enum: [active, inactive, suspended]
        lastLogin:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        permissions:
          type: array
          items:
            type: string
        mfaEnabled:
          type: boolean

    CreateUserRequest:
      type: object
      required:
        - email
        - firstName
        - lastName
        - role
      properties:
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [admin, operator, viewer, security_officer]
        permissions:
          type: array
          items:
            type: string
        sendInvitation:
          type: boolean
          default: true

    UpdateUserRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [admin, operator, viewer, security_officer]
        status:
          type: string
          enum: [active, inactive, suspended]
        permissions:
          type: array
          items:
            type: string

    UserListResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    # Access Control Schemas
    Door:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        location:
          type: string
        building:
          type: string
        floor:
          type: string
        room:
          type: string
        status:
          type: string
          enum: [online, offline, maintenance, error]
        lockType:
          type: string
          enum: [magnetic, electric_strike, motor_lock, smart_lock]
        accessLevel:
          type: string
          enum: [public, restricted, secure, high_security]
        isLocked:
          type: boolean
        lastActivity:
          type: string
          format: date-time
        configuration:
          type: object
          properties:
            unlockDuration:
              type: integer
              description: Default unlock duration in seconds
            autoLockDelay:
              type: integer
              description: Auto-lock delay in seconds
            accessSchedule:
              type: object
              description: Time-based access schedule
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateDoorRequest:
      type: object
      required:
        - name
        - location
        - lockType
        - accessLevel
      properties:
        name:
          type: string
        location:
          type: string
        building:
          type: string
        floor:
          type: string
        room:
          type: string
        lockType:
          type: string
          enum: [magnetic, electric_strike, motor_lock, smart_lock]
        accessLevel:
          type: string
          enum: [public, restricted, secure, high_security]
        configuration:
          type: object

    UpdateDoorRequest:
      type: object
      properties:
        name:
          type: string
        location:
          type: string
        building:
          type: string
        floor:
          type: string
        room:
          type: string
        accessLevel:
          type: string
          enum: [public, restricted, secure, high_security]
        configuration:
          type: object

    DoorListResponse:
      type: object
      properties:
        doors:
          type: array
          items:
            $ref: '#/components/schemas/Door'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    AccessEvent:
      type: object
      properties:
        id:
          type: string
        doorId:
          type: string
        userId:
          type: string
        credentialId:
          type: string
        eventType:
          type: string
          enum: [granted, denied, forced, propped, timeout, remote_unlock]
        timestamp:
          type: string
          format: date-time
        reason:
          type: string
        location:
          type: string
        userInfo:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
        doorInfo:
          type: object
          properties:
            name:
              type: string
            location:
              type: string

    AccessEventListResponse:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/AccessEvent'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    # Video Management Schemas
    Camera:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        location:
          type: string
        type:
          type: string
          enum: [fixed, ptz, thermal, analytics]
        status:
          type: string
          enum: [online, offline, recording, maintenance, error]
        ipAddress:
          type: string
          format: ipv4
        rtspUrl:
          type: string
          format: uri
        resolution:
          type: string
          enum: [720p, 1080p, 4k]
        frameRate:
          type: integer
        isRecording:
          type: boolean
        hasAudio:
          type: boolean
        capabilities:
          type: array
          items:
            type: string
            enum: [motion_detection, face_recognition, license_plate, analytics]
        configuration:
          type: object
          properties:
            motionSensitivity:
              type: integer
              minimum: 1
              maximum: 10
            recordingSchedule:
              type: object
            qualitySettings:
              type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateCameraRequest:
      type: object
      required:
        - name
        - location
        - type
        - ipAddress
        - rtspUrl
      properties:
        name:
          type: string
        location:
          type: string
        type:
          type: string
          enum: [fixed, ptz, thermal, analytics]
        ipAddress:
          type: string
          format: ipv4
        rtspUrl:
          type: string
          format: uri
        resolution:
          type: string
          enum: [720p, 1080p, 4k]
        frameRate:
          type: integer
        hasAudio:
          type: boolean
        capabilities:
          type: array
          items:
            type: string
        configuration:
          type: object

    UpdateCameraRequest:
      type: object
      properties:
        name:
          type: string
        location:
          type: string
        resolution:
          type: string
          enum: [720p, 1080p, 4k]
        frameRate:
          type: integer
        configuration:
          type: object

    CameraListResponse:
      type: object
      properties:
        cameras:
          type: array
          items:
            $ref: '#/components/schemas/Camera'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    Recording:
      type: object
      properties:
        id:
          type: string
        cameraId:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        duration:
          type: integer
          description: Duration in seconds
        fileSize:
          type: integer
          description: File size in bytes
        eventType:
          type: string
          enum: [motion, access_event, alarm, manual, scheduled]
        playbackUrl:
          type: string
          format: uri
        thumbnailUrl:
          type: string
          format: uri
        metadata:
          type: object
          properties:
            resolution:
              type: string
            frameRate:
              type: integer
            codec:
              type: string

    RecordingListResponse:
      type: object
      properties:
        recordings:
          type: array
          items:
            $ref: '#/components/schemas/Recording'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    # Environmental Monitoring Schemas
    Sensor:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          enum: [temperature, humidity, air_quality, motion, smoke, flood, vibration, noise]
        location:
          type: string
        status:
          type: string
          enum: [online, offline, alarm, maintenance, error]
        deviceId:
          type: string
        lastReading:
          $ref: '#/components/schemas/SensorReading'
        thresholds:
          type: object
          properties:
            minValue:
              type: number
            maxValue:
              type: number
            criticalMin:
              type: number
            criticalMax:
              type: number
        configuration:
          type: object
          properties:
            readingInterval:
              type: integer
              description: Reading interval in seconds
            calibrationOffset:
              type: number
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateSensorRequest:
      type: object
      required:
        - name
        - type
        - location
        - deviceId
      properties:
        name:
          type: string
        type:
          type: string
          enum: [temperature, humidity, air_quality, motion, smoke, flood, vibration, noise]
        location:
          type: string
        deviceId:
          type: string
        thresholds:
          type: object
        configuration:
          type: object

    SensorListResponse:
      type: object
      properties:
        sensors:
          type: array
          items:
            $ref: '#/components/schemas/Sensor'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    SensorReading:
      type: object
      properties:
        id:
          type: string
        sensorId:
          type: string
        value:
          type: number
        unit:
          type: string
        timestamp:
          type: string
          format: date-time
        quality:
          type: string
          enum: [good, poor, error]
        metadata:
          type: object

    SensorReadingListResponse:
      type: object
      properties:
        readings:
          type: array
          items:
            $ref: '#/components/schemas/SensorReading'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        aggregation:
          type: object
          properties:
            average:
              type: number
            minimum:
              type: number
            maximum:
              type: number
            count:
              type: integer

    # Visitor Management Schemas
    Visitor:
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        company:
          type: string
        purpose:
          type: string
        hostId:
          type: string
        hostName:
          type: string
        status:
          type: string
          enum: [pending, approved, checked_in, checked_out, expired, denied]
        visitDate:
          type: string
          format: date
        expectedArrival:
          type: string
          format: date-time
        expectedDeparture:
          type: string
          format: date-time
        actualArrival:
          type: string
          format: date-time
        actualDeparture:
          type: string
          format: date-time
        accessAreas:
          type: array
          items:
            type: string
        badgeNumber:
          type: string
        photoUrl:
          type: string
          format: uri
        notes:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateVisitorRequest:
      type: object
      required:
        - firstName
        - lastName
        - email
        - hostId
        - visitDate
        - purpose
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        company:
          type: string
        purpose:
          type: string
        hostId:
          type: string
        visitDate:
          type: string
          format: date
        expectedArrival:
          type: string
          format: date-time
        expectedDeparture:
          type: string
          format: date-time
        accessAreas:
          type: array
          items:
            type: string
        notes:
          type: string

    VisitorListResponse:
      type: object
      properties:
        visitors:
          type: array
          items:
            $ref: '#/components/schemas/Visitor'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    VisitorCheckIn:
      type: object
      properties:
        visitorId:
          type: string
        checkInTime:
          type: string
          format: date-time
        location:
          type: string
        badgeNumber:
          type: string
        accessGranted:
          type: array
          items:
            type: string
        expiresAt:
          type: string
          format: date-time

    # Mobile Credentials Schemas
    MobileCredential:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        deviceType:
          type: string
          enum: [ios, android, nfc_card, bluetooth_beacon]
        deviceId:
          type: string
        status:
          type: string
          enum: [active, suspended, revoked, expired]
        credentialType:
          type: string
          enum: [employee, visitor, contractor, temporary]
        accessLevel:
          type: string
        validFrom:
          type: string
          format: date-time
        validUntil:
          type: string
          format: date-time
        lastUsed:
          type: string
          format: date-time
        usageCount:
          type: integer
        accessAreas:
          type: array
          items:
            type: string
        issuedAt:
          type: string
          format: date-time
        revokedAt:
          type: string
          format: date-time
        metadata:
          type: object
          properties:
            deviceModel:
              type: string
            osVersion:
              type: string
            appVersion:
              type: string

    CreateMobileCredentialRequest:
      type: object
      required:
        - userId
        - deviceType
        - credentialType
        - validUntil
      properties:
        userId:
          type: string
        deviceType:
          type: string
          enum: [ios, android, nfc_card, bluetooth_beacon]
        deviceId:
          type: string
        credentialType:
          type: string
          enum: [employee, visitor, contractor, temporary]
        accessLevel:
          type: string
        validFrom:
          type: string
          format: date-time
        validUntil:
          type: string
          format: date-time
        accessAreas:
          type: array
          items:
            type: string

    MobileCredentialListResponse:
      type: object
      properties:
        credentials:
          type: array
          items:
            $ref: '#/components/schemas/MobileCredential'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    # Notification Schemas
    Notification:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: [security_alert, system_alert, access_denied, environmental_alarm, maintenance]
        priority:
          type: string
          enum: [low, medium, high, critical]
        title:
          type: string
        message:
          type: string
        status:
          type: string
          enum: [unread, read, acknowledged, resolved]
        recipientId:
          type: string
        sourceService:
          type: string
        sourceId:
          type: string
        metadata:
          type: object
        createdAt:
          type: string
          format: date-time
        readAt:
          type: string
          format: date-time
        acknowledgedAt:
          type: string
          format: date-time
        resolvedAt:
          type: string
          format: date-time

    CreateNotificationRequest:
      type: object
      required:
        - type
        - priority
        - title
        - message
        - recipientId
      properties:
        type:
          type: string
          enum: [security_alert, system_alert, access_denied, environmental_alarm, maintenance]
        priority:
          type: string
          enum: [low, medium, high, critical]
        title:
          type: string
        message:
          type: string
        recipientId:
          type: string
        sourceService:
          type: string
        sourceId:
          type: string
        metadata:
          type: object

    NotificationListResponse:
      type: object
      properties:
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/Notification'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        unreadCount:
          type: integer

    # Analytics Schemas
    DashboardMetrics:
      type: object
      properties:
        timeRange:
          type: string
        accessEvents:
          type: object
          properties:
            total:
              type: integer
            granted:
              type: integer
            denied:
              type: integer
            trend:
              type: array
              items:
                type: object
                properties:
                  timestamp:
                    type: string
                    format: date-time
                  count:
                    type: integer
        videoStreams:
          type: object
          properties:
            active:
              type: integer
            total:
              type: integer
            bandwidth:
              type: number
              description: Total bandwidth usage in Mbps
        environmentalReadings:
          type: object
          properties:
            sensorsOnline:
              type: integer
            sensorsTotal:
              type: integer
            alertsActive:
              type: integer
        alerts:
          type: object
          properties:
            critical:
              type: integer
            high:
              type: integer
            medium:
              type: integer
            low:
              type: integer
        systemHealth:
          type: object
          properties:
            servicesOnline:
              type: integer
            servicesTotal:
              type: integer
            cpuUsage:
              type: number
            memoryUsage:
              type: number
            diskUsage:
              type: number

    ReportTemplate:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        category:
          type: string
          enum: [access_control, video, environmental, compliance, security]
        parameters:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
                enum: [string, number, date, boolean, select]
              required:
                type: boolean
              options:
                type: array
                items:
                  type: string

    GenerateReportRequest:
      type: object
      required:
        - templateId
        - parameters
      properties:
        templateId:
          type: string
        parameters:
          type: object
        format:
          type: string
          enum: [pdf, excel, csv]
          default: pdf
        deliveryMethod:
          type: string
          enum: [download, email]
          default: download
        emailRecipients:
          type: array
          items:
            type: string
            format: email

    # Compliance Schemas
    AuditLog:
      type: object
      properties:
        id:
          type: string
        timestamp:
          type: string
          format: date-time
        userId:
          type: string
        userEmail:
          type: string
        action:
          type: string
        resourceType:
          type: string
        resourceId:
          type: string
        details:
          type: object
        ipAddress:
          type: string
        userAgent:
          type: string
        sessionId:
          type: string
        tenantId:
          type: string

    AuditLogListResponse:
      type: object
      properties:
        logs:
          type: array
          items:
            $ref: '#/components/schemas/AuditLog'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    DataRetentionPolicies:
      type: object
      properties:
        accessEvents:
          type: object
          properties:
            retentionPeriod:
              type: integer
              description: Retention period in days
            archiveAfter:
              type: integer
              description: Archive after days
        videoRecordings:
          type: object
          properties:
            retentionPeriod:
              type: integer
            archiveAfter:
              type: integer
            compressionEnabled:
              type: boolean
        auditLogs:
          type: object
          properties:
            retentionPeriod:
              type: integer
            archiveAfter:
              type: integer
        environmentalData:
          type: object
          properties:
            retentionPeriod:
              type: integer
            aggregationLevel:
              type: string
              enum: [raw, hourly, daily]
        visitorRecords:
          type: object
          properties:
            retentionPeriod:
              type: integer
            anonymizeAfter:
              type: integer

    UpdateDataRetentionRequest:
      type: object
      properties:
        accessEvents:
          type: object
        videoRecordings:
          type: object
        auditLogs:
          type: object
        environmentalData:
          type: object
        visitorRecords:
          type: object

    # System Schemas
    HealthStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
        version:
          type: string
        services:
          type: object
          additionalProperties:
            type: object
            properties:
              status:
                type: string
                enum: [up, down, degraded]
              responseTime:
                type: number
                description: Response time in milliseconds
              lastCheck:
                type: string
                format: date-time
              details:
                type: object
        database:
          type: object
          properties:
            status:
              type: string
              enum: [connected, disconnected, slow]
            connectionPool:
              type: object
              properties:
                active:
                  type: integer
                idle:
                  type: integer
                total:
                  type: integer
        cache:
          type: object
          properties:
            status:
              type: string
              enum: [connected, disconnected]
            hitRate:
              type: number
            memoryUsage:
              type: number

    # Alert Service Schemas
    Alert:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: [security, environmental, system, access_denied, maintenance, emergency]
        priority:
          type: string
          enum: [low, medium, high, critical]
        status:
          type: string
          enum: [active, acknowledged, resolved, escalated]
        title:
          type: string
        message:
          type: string
        sourceService:
          type: string
        sourceId:
          type: string
        location:
          type: string
        assignedTo:
          type: string
        acknowledgedBy:
          type: string
        acknowledgedAt:
          type: string
          format: date-time
        resolvedAt:
          type: string
          format: date-time
        escalationLevel:
          type: integer
        metadata:
          type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateAlertRequest:
      type: object
      required:
        - type
        - priority
        - title
        - message
      properties:
        type:
          type: string
          enum: [security, environmental, system, access_denied, maintenance, emergency]
        priority:
          type: string
          enum: [low, medium, high, critical]
        title:
          type: string
        message:
          type: string
        sourceService:
          type: string
        sourceId:
          type: string
        location:
          type: string
        assignedTo:
          type: string
        metadata:
          type: object

    UpdateAlertRequest:
      type: object
      properties:
        status:
          type: string
          enum: [active, acknowledged, resolved, escalated]
        assignedTo:
          type: string
        notes:
          type: string

    AlertListResponse:
      type: object
      properties:
        alerts:
          type: array
          items:
            $ref: '#/components/schemas/Alert'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    EscalationRules:
      type: object
      properties:
        rules:
          type: array
          items:
            type: object
            properties:
              alertType:
                type: string
              priority:
                type: string
              escalationLevels:
                type: array
                items:
                  type: object
                  properties:
                    level:
                      type: integer
                    timeoutMinutes:
                      type: integer
                    assignees:
                      type: array
                      items:
                        type: string
                    notificationMethods:
                      type: array
                      items:
                        type: string
                        enum: [email, sms, push, webhook]

    UpdateEscalationRulesRequest:
      type: object
      properties:
        rules:
          type: array
          items:
            type: object

    # Integration Service Schemas
    Integration:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          enum: [ldap, active_directory, hvac, fire_safety, elevator, visitor_system, calendar]
        status:
          type: string
          enum: [active, inactive, error, syncing]
        configuration:
          type: object
        lastSync:
          type: string
          format: date-time
        syncStatus:
          type: string
          enum: [success, failed, partial, in_progress]
        errorMessage:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateIntegrationRequest:
      type: object
      required:
        - name
        - type
        - configuration
      properties:
        name:
          type: string
        type:
          type: string
          enum: [ldap, active_directory, hvac, fire_safety, elevator, visitor_system, calendar]
        configuration:
          type: object
        autoSync:
          type: boolean
          default: true
        syncInterval:
          type: integer
          description: Sync interval in minutes

    UpdateIntegrationRequest:
      type: object
      properties:
        name:
          type: string
        configuration:
          type: object
        autoSync:
          type: boolean
        syncInterval:
          type: integer

    IntegrationListResponse:
      type: object
      properties:
        integrations:
          type: array
          items:
            $ref: '#/components/schemas/Integration'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    Webhook:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        url:
          type: string
          format: uri
        eventTypes:
          type: array
          items:
            type: string
        active:
          type: boolean
        secret:
          type: string
        retryPolicy:
          type: object
          properties:
            maxRetries:
              type: integer
            retryDelay:
              type: integer
        createdAt:
          type: string
          format: date-time

    CreateWebhookRequest:
      type: object
      required:
        - name
        - url
        - eventTypes
      properties:
        name:
          type: string
        url:
          type: string
          format: uri
        eventTypes:
          type: array
          items:
            type: string
        secret:
          type: string
        retryPolicy:
          type: object

    WebhookListResponse:
      type: object
      properties:
        webhooks:
          type: array
          items:
            $ref: '#/components/schemas/Webhook'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    LDAPConnectionTest:
      type: object
      required:
        - server
        - port
        - bindDN
        - bindPassword
      properties:
        server:
          type: string
        port:
          type: integer
        bindDN:
          type: string
        bindPassword:
          type: string
        baseDN:
          type: string
        useSSL:
          type: boolean

    # Backup & Recovery Service Schemas
    BackupJob:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          enum: [full, incremental, configuration, video, logs]
        status:
          type: string
          enum: [scheduled, running, completed, failed, cancelled]
        schedule:
          type: string
          description: Cron expression for scheduled backups
        lastRun:
          type: string
          format: date-time
        nextRun:
          type: string
          format: date-time
        duration:
          type: integer
          description: Backup duration in seconds
        size:
          type: integer
          description: Backup size in bytes
        retentionDays:
          type: integer
        storageLocation:
          type: string
        encryptionEnabled:
          type: boolean
        compressionEnabled:
          type: boolean
        createdAt:
          type: string
          format: date-time

    CreateBackupJobRequest:
      type: object
      required:
        - name
        - type
        - schedule
      properties:
        name:
          type: string
        type:
          type: string
          enum: [full, incremental, configuration, video, logs]
        schedule:
          type: string
        retentionDays:
          type: integer
          default: 30
        encryptionEnabled:
          type: boolean
          default: true
        compressionEnabled:
          type: boolean
          default: true

    BackupJobListResponse:
      type: object
      properties:
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/BackupJob'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    RestoreRequest:
      type: object
      required:
        - backupId
        - restoreType
      properties:
        backupId:
          type: string
        restoreType:
          type: string
          enum: [full, selective, configuration_only]
        targetLocation:
          type: string
        overwriteExisting:
          type: boolean
          default: false
        restoreOptions:
          type: object

    DisasterRecoveryStatus:
      type: object
      properties:
        primaryRegion:
          type: string
        secondaryRegion:
          type: string
        replicationStatus:
          type: string
          enum: [healthy, degraded, failed]
        lastReplication:
          type: string
          format: date-time
        rpo:
          type: integer
          description: Recovery Point Objective in minutes
        rto:
          type: integer
          description: Recovery Time Objective in minutes
        failoverStatus:
          type: string
          enum: [ready, in_progress, failed, completed]

    # Security & Compliance Service Schemas
    Certificate:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          enum: [ssl, device, ca, client]
        status:
          type: string
          enum: [valid, expiring, expired, revoked]
        subject:
          type: string
        issuer:
          type: string
        serialNumber:
          type: string
        validFrom:
          type: string
          format: date-time
        validTo:
          type: string
          format: date-time
        fingerprint:
          type: string
        keySize:
          type: integer
        algorithm:
          type: string
        autoRenewal:
          type: boolean
        createdAt:
          type: string
          format: date-time

    CreateCertificateRequest:
      type: object
      required:
        - name
        - type
        - subject
      properties:
        name:
          type: string
        type:
          type: string
          enum: [ssl, device, ca, client]
        subject:
          type: string
        keySize:
          type: integer
          enum: [2048, 4096]
          default: 2048
        validityDays:
          type: integer
          default: 365
        autoRenewal:
          type: boolean
          default: true

    CertificateListResponse:
      type: object
      properties:
        certificates:
          type: array
          items:
            $ref: '#/components/schemas/Certificate'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    SecurityThreat:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: [malware, intrusion, ddos, unauthorized_access, data_breach]
        severity:
          type: string
          enum: [low, medium, high, critical]
        status:
          type: string
          enum: [active, investigating, resolved, false_positive]
        source:
          type: string
        target:
          type: string
        description:
          type: string
        indicators:
          type: array
          items:
            type: string
        mitigationSteps:
          type: array
          items:
            type: string
        detectedAt:
          type: string
          format: date-time
        resolvedAt:
          type: string
          format: date-time

    ThreatListResponse:
      type: object
      properties:
        threats:
          type: array
          items:
            $ref: '#/components/schemas/SecurityThreat'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    SecurityIncident:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        severity:
          type: string
          enum: [low, medium, high, critical]
        status:
          type: string
          enum: [open, investigating, resolved, closed]
        category:
          type: string
          enum: [access_violation, data_breach, system_compromise, policy_violation]
        assignedTo:
          type: string
        reportedBy:
          type: string
        affectedSystems:
          type: array
          items:
            type: string
        timeline:
          type: array
          items:
            type: object
            properties:
              timestamp:
                type: string
                format: date-time
              action:
                type: string
              description:
                type: string
              performedBy:
                type: string
        createdAt:
          type: string
          format: date-time
        resolvedAt:
          type: string
          format: date-time

    CreateIncidentRequest:
      type: object
      required:
        - title
        - description
        - severity
        - category
      properties:
        title:
          type: string
        description:
          type: string
        severity:
          type: string
          enum: [low, medium, high, critical]
        category:
          type: string
          enum: [access_violation, data_breach, system_compromise, policy_violation]
        assignedTo:
          type: string
        affectedSystems:
          type: array
          items:
            type: string

    IncidentListResponse:
      type: object
      properties:
        incidents:
          type: array
          items:
            $ref: '#/components/schemas/SecurityIncident'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    ComplianceReport:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        framework:
          type: string
          enum: [sox, hipaa, pci_dss, gdpr, ccpa, iso27001]
        status:
          type: string
          enum: [draft, pending, completed, failed]
        reportPeriod:
          type: object
          properties:
            startDate:
              type: string
              format: date
            endDate:
              type: string
              format: date
        findings:
          type: array
          items:
            type: object
            properties:
              control:
                type: string
              status:
                type: string
                enum: [compliant, non_compliant, not_applicable]
              evidence:
                type: array
                items:
                  type: string
              recommendations:
                type: array
                items:
                  type: string
        generatedAt:
          type: string
          format: date-time
        generatedBy:
          type: string

    GenerateComplianceReportRequest:
      type: object
      required:
        - framework
        - reportPeriod
      properties:
        framework:
          type: string
          enum: [sox, hipaa, pci_dss, gdpr, ccpa, iso27001]
        reportPeriod:
          type: object
          properties:
            startDate:
              type: string
              format: date
            endDate:
              type: string
              format: date
        includeEvidence:
          type: boolean
          default: true
        format:
          type: string
          enum: [pdf, excel, json]
          default: pdf

    ComplianceReportListResponse:
      type: object
      properties:
        reports:
          type: array
          items:
            $ref: '#/components/schemas/ComplianceReport'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    # Maintenance Service Schemas
    WorkOrder:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [preventive, corrective, emergency, inspection]
        priority:
          type: string
          enum: [low, medium, high, urgent]
        status:
          type: string
          enum: [open, assigned, in_progress, completed, cancelled]
        deviceId:
          type: string
        deviceType:
          type: string
          enum: [door, camera, sensor, panel, reader, elevator]
        assignedTo:
          type: string
        requestedBy:
          type: string
        scheduledDate:
          type: string
          format: date-time
        completedDate:
          type: string
          format: date-time
        estimatedDuration:
          type: integer
          description: Estimated duration in minutes
        actualDuration:
          type: integer
          description: Actual duration in minutes
        partsUsed:
          type: array
          items:
            type: object
            properties:
              partNumber:
                type: string
              description:
                type: string
              quantity:
                type: integer
              cost:
                type: number
        laborCost:
          type: number
        notes:
          type: string
        attachments:
          type: array
          items:
            type: string
            format: uri
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateWorkOrderRequest:
      type: object
      required:
        - title
        - description
        - type
        - priority
        - deviceId
        - deviceType
      properties:
        title:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [preventive, corrective, emergency, inspection]
        priority:
          type: string
          enum: [low, medium, high, urgent]
        deviceId:
          type: string
        deviceType:
          type: string
          enum: [door, camera, sensor, panel, reader, elevator]
        assignedTo:
          type: string
        scheduledDate:
          type: string
          format: date-time
        estimatedDuration:
          type: integer

    UpdateWorkOrderRequest:
      type: object
      properties:
        status:
          type: string
          enum: [open, assigned, in_progress, completed, cancelled]
        assignedTo:
          type: string
        scheduledDate:
          type: string
          format: date-time
        completedDate:
          type: string
          format: date-time
        actualDuration:
          type: integer
        partsUsed:
          type: array
          items:
            type: object
        laborCost:
          type: number
        notes:
          type: string

    WorkOrderListResponse:
      type: object
      properties:
        workOrders:
          type: array
          items:
            $ref: '#/components/schemas/WorkOrder'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    MaintenanceSchedule:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        deviceType:
          type: string
          enum: [door, camera, sensor, panel, reader, elevator]
        deviceIds:
          type: array
          items:
            type: string
        schedule:
          type: string
          description: Cron expression for maintenance schedule
        taskTemplate:
          type: object
          properties:
            title:
              type: string
            description:
              type: string
            estimatedDuration:
              type: integer
            requiredParts:
              type: array
              items:
                type: string
        active:
          type: boolean
        lastExecution:
          type: string
          format: date-time
        nextExecution:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time

    CreateMaintenanceScheduleRequest:
      type: object
      required:
        - name
        - deviceType
        - schedule
        - taskTemplate
      properties:
        name:
          type: string
        deviceType:
          type: string
          enum: [door, camera, sensor, panel, reader, elevator]
        deviceIds:
          type: array
          items:
            type: string
        schedule:
          type: string
        taskTemplate:
          type: object

    MaintenanceScheduleListResponse:
      type: object
      properties:
        schedules:
          type: array
          items:
            $ref: '#/components/schemas/MaintenanceSchedule'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    DeviceDiagnostics:
      type: object
      properties:
        deviceId:
          type: string
        deviceType:
          type: string
        status:
          type: string
          enum: [healthy, warning, error, offline]
        lastCheck:
          type: string
          format: date-time
        connectivity:
          type: object
          properties:
            status:
              type: string
              enum: [connected, disconnected, intermittent]
            latency:
              type: number
            packetLoss:
              type: number
        performance:
          type: object
          properties:
            cpuUsage:
              type: number
            memoryUsage:
              type: number
            temperature:
              type: number
            uptime:
              type: integer
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
              message:
                type: string
              timestamp:
                type: string
                format: date-time
              severity:
                type: string
                enum: [info, warning, error, critical]
        recommendations:
          type: array
          items:
            type: string

    # Elevator Control Service Schemas
    Elevator:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        building:
          type: string
        manufacturer:
          type: string
          enum: [otis, kone, schindler, thyssenkrupp, other]
        model:
          type: string
        capacity:
          type: integer
          description: Maximum capacity in kg
        floorsServed:
          type: array
          items:
            type: integer
        status:
          type: string
          enum: [online, offline, maintenance, emergency, error]
        currentFloor:
          type: integer
        direction:
          type: string
          enum: [up, down, idle]
        emergencyOverride:
          type: boolean
        lastMaintenance:
          type: string
          format: date-time
        nextMaintenance:
          type: string
          format: date-time
        configuration:
          type: object
          properties:
            speed:
              type: number
            doorOpenTime:
              type: integer
            maxWaitTime:
              type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateElevatorRequest:
      type: object
      required:
        - name
        - building
        - manufacturer
        - floorsServed
      properties:
        name:
          type: string
        building:
          type: string
        manufacturer:
          type: string
          enum: [otis, kone, schindler, thyssenkrupp, other]
        model:
          type: string
        capacity:
          type: integer
        floorsServed:
          type: array
          items:
            type: integer
        configuration:
          type: object

    UpdateElevatorRequest:
      type: object
      properties:
        name:
          type: string
        capacity:
          type: integer
        floorsServed:
          type: array
          items:
            type: integer
        configuration:
          type: object

    ElevatorListResponse:
      type: object
      properties:
        elevators:
          type: array
          items:
            $ref: '#/components/schemas/Elevator'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    ElevatorAccessControl:
      type: object
      properties:
        elevatorId:
          type: string
        accessRules:
          type: array
          items:
            type: object
            properties:
              userGroup:
                type: string
              allowedFloors:
                type: array
                items:
                  type: integer
              timeRestrictions:
                type: object
                properties:
                  startTime:
                    type: string
                  endTime:
                    type: string
                  daysOfWeek:
                    type: array
                    items:
                      type: integer
              requiresEscort:
                type: boolean
        emergencyAccess:
          type: object
          properties:
            enabled:
              type: boolean
            authorizedUsers:
              type: array
              items:
                type: string
        destinationDispatch:
          type: boolean
        updatedAt:
          type: string
          format: date-time

    UpdateElevatorAccessControlRequest:
      type: object
      properties:
        accessRules:
          type: array
          items:
            type: object
        emergencyAccess:
          type: object
        destinationDispatch:
          type: boolean

    # API Documentation Service Schemas
    APISpecification:
      type: object
      properties:
        serviceName:
          type: string
        version:
          type: string
        title:
          type: string
        description:
          type: string
        endpoints:
          type: integer
        lastUpdated:
          type: string
          format: date-time
        downloadUrls:
          type: object
          properties:
            json:
              type: string
              format: uri
            yaml:
              type: string
              format: uri

    SDK:
      type: object
      properties:
        language:
          type: string
          enum: [python, javascript, csharp, java, go, php]
        version:
          type: string
        description:
          type: string
        downloadUrl:
          type: string
          format: uri
        documentation:
          type: string
          format: uri
        examples:
          type: string
          format: uri
        lastUpdated:
          type: string
          format: date-time

    GenerateSDKRequest:
      type: object
      required:
        - language
        - services
      properties:
        language:
          type: string
          enum: [python, javascript, csharp, java, go, php]
        services:
          type: array
          items:
            type: string
        packageName:
          type: string
        version:
          type: string
        includeExamples:
          type: boolean
          default: true

    SandboxEnvironment:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        baseUrl:
          type: string
          format: uri
        apiKey:
          type: string
        status:
          type: string
          enum: [active, expired, suspended]
        expiresAt:
          type: string
          format: date-time
        usage:
          type: object
          properties:
            requestCount:
              type: integer
            lastRequest:
              type: string
              format: date-time
        createdAt:
          type: string
          format: date-time

    # Testing Infrastructure Service Schemas
    TestSuite:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [unit, integration, e2e, load, security, compliance]
        tests:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
              enabled:
                type: boolean
        configuration:
          type: object
        lastExecution:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time

    CreateTestSuiteRequest:
      type: object
      required:
        - name
        - type
        - tests
      properties:
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [unit, integration, e2e, load, security, compliance]
        tests:
          type: array
          items:
            type: object
        configuration:
          type: object

    TestSuiteListResponse:
      type: object
      properties:
        testSuites:
          type: array
          items:
            $ref: '#/components/schemas/TestSuite'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    TestExecution:
      type: object
      properties:
        id:
          type: string
        suiteId:
          type: string
        status:
          type: string
          enum: [pending, running, completed, failed]
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        duration:
          type: integer
          description: Execution duration in seconds
        results:
          type: object
          properties:
            total:
              type: integer
            passed:
              type: integer
            failed:
              type: integer
            skipped:
              type: integer
        testResults:
          type: array
          items:
            type: object
            properties:
              testName:
                type: string
              status:
                type: string
                enum: [passed, failed, skipped]
              duration:
                type: integer
              errorMessage:
                type: string
              stackTrace:
                type: string
        artifacts:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
              url:
                type: string
                format: uri

    LoadTestRequest:
      type: object
      required:
        - target
        - scenario
      properties:
        target:
          type: string
          format: uri
        scenario:
          type: object
          properties:
            virtualUsers:
              type: integer
            duration:
              type: integer
              description: Test duration in seconds
            rampUpTime:
              type: integer
              description: Ramp up time in seconds
        thresholds:
          type: object
          properties:
            responseTime:
              type: integer
              description: Maximum acceptable response time in ms
            errorRate:
              type: number
              description: Maximum acceptable error rate (0-1)
        environment:
          type: string
          enum: [development, staging, production]

    # Enhanced Analytics Schemas
    VideoAnalyticsResults:
      type: object
      properties:
        cameraId:
          type: string
        timeRange:
          type: object
          properties:
            startTime:
              type: string
              format: date-time
            endTime:
              type: string
              format: date-time
        faceRecognition:
          type: array
          items:
            type: object
            properties:
              timestamp:
                type: string
                format: date-time
              personId:
                type: string
              confidence:
                type: number
              boundingBox:
                type: object
        licensePlateRecognition:
          type: array
          items:
            type: object
            properties:
              timestamp:
                type: string
                format: date-time
              plateNumber:
                type: string
              confidence:
                type: number
              vehicleType:
                type: string
        behaviorAnalysis:
          type: array
          items:
            type: object
            properties:
              timestamp:
                type: string
                format: date-time
              behavior:
                type: string
                enum: [loitering, running, fighting, falling, tailgating]
              confidence:
                type: number
              location:
                type: object

    BehavioralAnalysisResults:
      type: object
      properties:
        timeRange:
          type: object
        patterns:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              frequency:
                type: integer
              locations:
                type: array
                items:
                  type: string
              riskScore:
                type: number
        anomalies:
          type: array
          items:
            type: object
            properties:
              timestamp:
                type: string
                format: date-time
              type:
                type: string
              description:
                type: string
              severity:
                type: string
                enum: [low, medium, high, critical]
        recommendations:
          type: array
          items:
            type: string

    PredictiveAnalytics:
      type: object
      properties:
        predictionType:
          type: string
        timeHorizon:
          type: string
        predictions:
          type: array
          items:
            type: object
            properties:
              category:
                type: string
              probability:
                type: number
              impact:
                type: string
                enum: [low, medium, high, critical]
              recommendedActions:
                type: array
                items:
                  type: string
        confidence:
          type: number
        lastUpdated:
          type: string
          format: date-time

    # Enhanced Environmental Schemas
    HVACStatus:
      type: object
      properties:
        building:
          type: string
        zones:
          type: array
          items:
            type: object
            properties:
              zoneId:
                type: string
              name:
                type: string
              temperature:
                type: number
              humidity:
                type: number
              setpoint:
                type: number
              mode:
                type: string
                enum: [heat, cool, auto, off]
              fanSpeed:
                type: string
                enum: [low, medium, high, auto]
              status:
                type: string
                enum: [online, offline, maintenance, error]
        systemStatus:
          type: string
          enum: [normal, warning, alarm, maintenance]
        energyUsage:
          type: object
          properties:
            current:
              type: number
            daily:
              type: number
            monthly:
              type: number
        lastUpdated:
          type: string
          format: date-time

    HVACControlRequest:
      type: object
      required:
        - zoneId
        - action
      properties:
        zoneId:
          type: string
        action:
          type: string
          enum: [set_temperature, set_mode, set_fan_speed, emergency_shutdown]
        parameters:
          type: object
          properties:
            temperature:
              type: number
            mode:
              type: string
              enum: [heat, cool, auto, off]
            fanSpeed:
              type: string
              enum: [low, medium, high, auto]

    HVACControlResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        newStatus:
          type: object
        executedAt:
          type: string
          format: date-time

    AutomationRule:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        trigger:
          type: object
          properties:
            type:
              type: string
              enum: [sensor_threshold, time_schedule, occupancy_change, external_event]
            conditions:
              type: object
        actions:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum: [hvac_control, alert, notification, access_control]
              parameters:
                type: object
        active:
          type: boolean
        lastTriggered:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time

    CreateAutomationRuleRequest:
      type: object
      required:
        - name
        - trigger
        - actions
      properties:
        name:
          type: string
        description:
          type: string
        trigger:
          type: object
        actions:
          type: array
          items:
            type: object

    # Enhanced Mobile Credentials Schemas
    MeshNetworkStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, offline]
        connectedNodes:
          type: integer
        totalNodes:
          type: integer
        lastSync:
          type: string
          format: date-time
        pendingRevocations:
          type: integer
        networkTopology:
          type: array
          items:
            type: object
            properties:
              nodeId:
                type: string
              nodeType:
                type: string
                enum: [access_panel, mobile_device, gateway]
              status:
                type: string
                enum: [online, offline, syncing]
              lastSeen:
                type: string
                format: date-time
              connections:
                type: array
                items:
                  type: string

    # Common Schemas
    PaginationInfo:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer
        hasNext:
          type: boolean
        hasPrevious:
          type: boolean

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string

  responses:
    BadRequest:
      description: Bad request - invalid input parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: BAD_REQUEST
            message: Invalid input parameters
            details:
              field: email
              reason: Invalid email format
            timestamp: "2024-01-15T10:30:00Z"
            requestId: req_123456789

    Unauthorized:
      description: Unauthorized - authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: UNAUTHORIZED
            message: Authentication required
            timestamp: "2024-01-15T10:30:00Z"
            requestId: req_123456789

    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: FORBIDDEN
            message: Insufficient permissions to access this resource
            timestamp: "2024-01-15T10:30:00Z"
            requestId: req_123456789

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: NOT_FOUND
            message: Resource not found
            timestamp: "2024-01-15T10:30:00Z"
            requestId: req_123456789

    Conflict:
      description: Conflict - resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: CONFLICT
            message: Resource already exists
            details:
              field: email
              value: user@example.com
            timestamp: "2024-01-15T10:30:00Z"
            requestId: req_123456789

    RateLimited:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: RATE_LIMITED
            message: Rate limit exceeded. Try again later.
            details:
              retryAfter: 60
            timestamp: "2024-01-15T10:30:00Z"
            requestId: req_123456789

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: INTERNAL_ERROR
            message: An unexpected error occurred
            timestamp: "2024-01-15T10:30:00Z"
            requestId: req_123456789

tags:
  - name: Authentication
    description: User authentication and session management
  - name: User Management
    description: User account management and permissions
  - name: Access Control
    description: Door access control and security management
  - name: Video Management
    description: Camera management and video recording
  - name: Environmental Monitoring
    description: Environmental sensor management and monitoring
  - name: Visitor Management
    description: Visitor registration and tracking
  - name: Mobile Credentials
    description: Mobile credential management and provisioning
  - name: Notifications
    description: Alert and notification management
  - name: Analytics
    description: Reporting and analytics
  - name: Compliance
    description: Audit logging and compliance features
  - name: Real-time Events
    description: WebSocket-based real-time event streaming
  - name: System
    description: System health and monitoring
  - name: Alert Service
    description: Real-time alerting, escalation workflows, and notification management
  - name: Integration Service
    description: Third-party system integrations including LDAP, HVAC, and building automation
  - name: Backup & Recovery Service
    description: Automated backup, disaster recovery, and failover management
  - name: Security & Compliance Service
    description: Security monitoring, compliance reporting, and certificate management
  - name: Maintenance Service
    description: Preventive maintenance, work orders, and device diagnostics
  - name: Elevator Control Service
    description: Elevator access control, emergency override, and manufacturer integration
  - name: API Documentation Service
    description: OpenAPI specifications, SDK generation, and developer tools
  - name: Testing Infrastructure Service
    description: Automated testing pipelines, load testing, and performance monitoring

externalDocs:
  description: SPARC Platform Documentation
  url: https://docs.sparc-platform.com
