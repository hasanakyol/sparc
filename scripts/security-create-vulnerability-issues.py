#!/usr/bin/env python3
"""
Create GitHub Issues for Security Vulnerabilities
Automatically creates GitHub issues for vulnerabilities above a specified threshold.
"""

import argparse
import json
import os
import sys
from typing import Dict, Any, List
import subprocess


def load_report(filepath: str) -> Dict[str, Any]:
    """Load the vulnerability report."""
    try:
        with open(filepath, 'r') as f:
            return json.load(f)
    except Exception as e:
        print(f"Error loading report: {e}")
        return {}


def filter_vulnerabilities(vulnerabilities: List[Dict[str, Any]], threshold: str) -> List[Dict[str, Any]]:
    """Filter vulnerabilities based on severity threshold."""
    severity_order = ['critical', 'high', 'medium', 'low']
    threshold_index = severity_order.index(threshold.lower())
    
    filtered = []
    for vuln in vulnerabilities:
        severity = vuln.get('severity', 'low').lower()
        if severity in severity_order:
            vuln_index = severity_order.index(severity)
            if vuln_index <= threshold_index:
                filtered.append(vuln)
    
    return filtered


def group_vulnerabilities(vulnerabilities: List[Dict[str, Any]]) -> Dict[str, List[Dict[str, Any]]]:
    """Group vulnerabilities by type for better issue organization."""
    grouped = {}
    
    for vuln in vulnerabilities:
        vuln_type = vuln.get('type', 'Unknown')
        if vuln_type not in grouped:
            grouped[vuln_type] = []
        grouped[vuln_type].append(vuln)
    
    return grouped


def create_issue_body(vuln_type: str, vulnerabilities: List[Dict[str, Any]]) -> str:
    """Create the issue body for a group of vulnerabilities."""
    severity_emoji = {
        'critical': '🔴',
        'high': '🟠',
        'medium': '🟡',
        'low': '🔵'
    }
    
    body = f"""## Security Vulnerability: {vuln_type}

### Summary
Found {len(vulnerabilities)} instance(s) of {vuln_type} that require remediation.

### Details
"""
    
    for i, vuln in enumerate(vulnerabilities[:10], 1):  # Limit to 10 to avoid huge issues
        severity = vuln.get('severity', 'unknown')
        emoji = severity_emoji.get(severity.lower(), '⚪')
        
        body += f"""
#### {i}. {emoji} {severity.upper()} - {vuln.get('title', 'Untitled')}

**File:** `{vuln.get('file', 'Unknown')}`
**Line:** {vuln.get('line', 'Unknown')}
**Scanner:** {vuln.get('scanner', 'Unknown')}

**Description:**
{vuln.get('description', 'No description available')}

**Recommendation:**
{vuln.get('recommendation', 'Please review and apply appropriate fixes.')}

---
"""
    
    if len(vulnerabilities) > 10:
        body += f"\n*... and {len(vulnerabilities) - 10} more instances*\n"
    
    body += """
### Action Required
1. Review each vulnerability instance
2. Apply the recommended fixes
3. Test the changes thoroughly
4. Update this issue with progress

### References
- [OWASP Top 10](https://owasp.org/www-project-top-ten/)
- [CWE Database](https://cwe.mitre.org/)

/cc @security-team
"""
    
    return body


def create_github_issue(title: str, body: str, labels: List[str], token: str) -> bool:
    """Create a GitHub issue using the GitHub CLI."""
    try:
        # Check if gh CLI is available
        result = subprocess.run(['which', 'gh'], capture_output=True)
        if result.returncode != 0:
            print("GitHub CLI (gh) not found. Please install it to create issues.")
            return False
        
        # Create the issue
        cmd = ['gh', 'issue', 'create', '--title', title, '--body', body]
        
        # Add labels
        for label in labels:
            cmd.extend(['--label', label])
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"✅ Created issue: {title}")
            return True
        else:
            print(f"❌ Failed to create issue: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"Error creating issue: {e}")
        return False


def main():
    parser = argparse.ArgumentParser(description='Create GitHub issues for security vulnerabilities')
    parser.add_argument('--report', required=True, help='Path to the vulnerability report JSON')
    parser.add_argument('--threshold', default='high', choices=['critical', 'high', 'medium', 'low'],
                        help='Minimum severity to create issues for')
    parser.add_argument('--github-token', help='GitHub token (or use GITHUB_TOKEN env var)')
    parser.add_argument('--dry-run', action='store_true', help='Show what would be created without creating issues')
    parser.add_argument('--max-issues', type=int, default=5, help='Maximum number of issues to create')
    args = parser.parse_args()
    
    # Get GitHub token
    token = args.github_token or os.environ.get('GITHUB_TOKEN')
    if not token and not args.dry_run:
        print("Error: GitHub token required. Set GITHUB_TOKEN or use --github-token")
        sys.exit(1)
    
    # Load report
    report = load_report(args.report)
    if not report:
        print("No vulnerabilities found or report is empty")
        return
    
    vulnerabilities = report.get('vulnerabilities', [])
    if not vulnerabilities:
        print("No vulnerabilities found in report")
        return
    
    # Filter vulnerabilities
    filtered = filter_vulnerabilities(vulnerabilities, args.threshold)
    print(f"Found {len(filtered)} vulnerabilities at or above {args.threshold} severity")
    
    if not filtered:
        print("No vulnerabilities meet the threshold criteria")
        return
    
    # Group vulnerabilities
    grouped = group_vulnerabilities(filtered)
    
    # Create issues
    created = 0
    for vuln_type, vulns in grouped.items():
        if created >= args.max_issues:
            print(f"Reached maximum issue limit ({args.max_issues})")
            break
        
        # Determine severity for labels
        max_severity = 'low'
        for vuln in vulns:
            severity = vuln.get('severity', 'low').lower()
            if severity == 'critical':
                max_severity = 'critical'
                break
            elif severity == 'high' and max_severity != 'critical':
                max_severity = 'high'
            elif severity == 'medium' and max_severity not in ['critical', 'high']:
                max_severity = 'medium'
        
        title = f"🔒 Security: {vuln_type} ({len(vulns)} instance{'s' if len(vulns) > 1 else ''})"
        body = create_issue_body(vuln_type, vulns)
        labels = ['security', 'vulnerability', max_severity, 'automated']
        
        if args.dry_run:
            print(f"\n--- DRY RUN: Would create issue ---")
            print(f"Title: {title}")
            print(f"Labels: {', '.join(labels)}")
            print(f"Body preview: {body[:200]}...")
        else:
            if create_github_issue(title, body, labels, token):
                created += 1
    
    if not args.dry_run:
        print(f"\n✅ Created {created} issue(s) for security vulnerabilities")


if __name__ == '__main__':
    main()