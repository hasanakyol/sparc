apiVersion: batch/v1
kind: Job
metadata:
  name: sparc-migration-${MIGRATION_JOB_ID:-$(date +%s)}
  namespace: ${NAMESPACE:-sparc}
  labels:
    app: sparc-migration
    component: database
    environment: ${ENVIRONMENT:-production}
  annotations:
    deployment.kubernetes.io/revision: "${IMAGE_TAG:-latest}"
    sparc.io/migration-timestamp: "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
spec:
  # Ensure job runs only once and doesn't restart on failure
  backoffLimit: 0
  completions: 1
  parallelism: 1
  activeDeadlineSeconds: 1800  # 30 minutes timeout
  ttlSecondsAfterFinished: 86400  # Keep job for 24 hours for debugging
  
  template:
    metadata:
      labels:
        app: sparc-migration
        component: database
        environment: ${ENVIRONMENT:-production}
      annotations:
        sparc.io/migration-job: "true"
    spec:
      restartPolicy: Never
      serviceAccountName: sparc-migration-sa
      
      # Security context for the pod
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      # Init container to verify database connectivity
      initContainers:
      - name: db-connectivity-check
        image: postgres:15-alpine
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: sparc-database-secrets
              key: database-url
        - name: PGHOST
          valueFrom:
            secretKeyRef:
              name: sparc-database-secrets
              key: host
        - name: PGPORT
          valueFrom:
            secretKeyRef:
              name: sparc-database-secrets
              key: port
              optional: true
        - name: PGDATABASE
          valueFrom:
            secretKeyRef:
              name: sparc-database-secrets
              key: database
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: sparc-database-secrets
              key: username
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: sparc-database-secrets
              key: password
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Checking database connectivity..."
          
          # Set default port if not provided
          PGPORT=${PGPORT:-5432}
          
          # Test basic connectivity
          until pg_isready -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d "$PGDATABASE"; do
            echo "Waiting for database to be ready..."
            sleep 5
          done
          
          echo "Database connectivity verified"
          
          # Test authentication
          psql "$DATABASE_URL" -c "SELECT version();" > /dev/null
          echo "Database authentication successful"
          
          # Check if database exists and is accessible
          psql "$DATABASE_URL" -c "SELECT current_database(), current_user;" > /dev/null
          echo "Database access verified"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      
      containers:
      - name: prisma-migrate
        image: ${ECR_REGISTRY}/sparc-migration:${IMAGE_TAG:-latest}
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        
        # Environment variables for database connection
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: sparc-database-secrets
              key: database-url
        - name: POSTGRES_HOST
          valueFrom:
            secretKeyRef:
              name: sparc-database-secrets
              key: host
        - name: POSTGRES_PORT
          valueFrom:
            secretKeyRef:
              name: sparc-database-secrets
              key: port
              optional: true
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: sparc-database-secrets
              key: database
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: sparc-database-secrets
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sparc-database-secrets
              key: password
        - name: NODE_ENV
          value: "production"
        - name: PRISMA_SCHEMA_DISABLE_ADVISORY_LOCK
          value: "1"
        - name: MIGRATION_ENGINE_LOG_LEVEL
          value: "info"
        - name: ENVIRONMENT
          value: "${ENVIRONMENT:-production}"
        - name: TENANT_ID
          value: "system"
        
        # Migration command with comprehensive error handling
        command:
        - /bin/sh
        - -c
        - |
          set -e
          
          echo "Starting SPARC database migration..."
          echo "Environment: ${ENVIRONMENT:-production}"
          echo "Database: $POSTGRES_DB"
          echo "Host: $POSTGRES_HOST"
          echo "Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          
          # Change to the correct directory
          cd /app/packages/shared
          
          # Verify Prisma schema exists
          if [ ! -f "prisma/schema.prisma" ]; then
            echo "ERROR: Prisma schema not found at prisma/schema.prisma"
            exit 1
          fi
          
          echo "Prisma schema found, validating..."
          
          # Generate Prisma client
          echo "Generating Prisma client..."
          npx prisma generate --schema=prisma/schema.prisma
          
          # Validate database connection
          echo "Validating database connection..."
          npx prisma db execute --schema=prisma/schema.prisma --stdin <<< "SELECT 1;"
          
          # Check current migration status
          echo "Checking current migration status..."
          npx prisma migrate status --schema=prisma/schema.prisma || true
          
          # Deploy migrations
          echo "Deploying database migrations..."
          npx prisma migrate deploy --schema=prisma/schema.prisma
          
          # Verify migration success
          echo "Verifying migration deployment..."
          npx prisma migrate status --schema=prisma/schema.prisma
          
          # Validate schema integrity
          echo "Validating database schema..."
          npx prisma db execute --schema=prisma/schema.prisma --stdin <<< "
            SELECT 
              schemaname,
              tablename,
              tableowner
            FROM pg_tables 
            WHERE schemaname = 'public'
            ORDER BY tablename;
          "
          
          # Count entities to verify all 28+ tables are created
          echo "Counting database entities..."
          ENTITY_COUNT=$(npx prisma db execute --schema=prisma/schema.prisma --stdin <<< "
            SELECT COUNT(*) as table_count 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_type = 'BASE TABLE';
          " | grep -o '[0-9]\+' | tail -1)
          
          echo "Database entities created: $ENTITY_COUNT"
          
          if [ "$ENTITY_COUNT" -lt 28 ]; then
            echo "WARNING: Expected at least 28 entities, found $ENTITY_COUNT"
            echo "Listing created tables:"
            npx prisma db execute --schema=prisma/schema.prisma --stdin <<< "
              SELECT tablename 
              FROM pg_tables 
              WHERE schemaname = 'public'
              ORDER BY tablename;
            "
          else
            echo "SUCCESS: All expected database entities created"
          fi
          
          # Final validation
          echo "Running final database validation..."
          npx prisma validate --schema=prisma/schema.prisma
          
          echo "Database migration completed successfully!"
          echo "Migration completed at: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
        
        # Resource limits
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        
        # Volume mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: prisma-cache
          mountPath: /app/.prisma
        - name: npm-cache
          mountPath: /home/node/.npm
      
      # Volumes
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
      - name: prisma-cache
        emptyDir:
          sizeLimit: 200Mi
      - name: npm-cache
        emptyDir:
          sizeLimit: 100Mi

---
# Service Account for migration job
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sparc-migration-sa
  namespace: ${NAMESPACE:-sparc}
  labels:
    app: sparc-migration
    component: database

---
# Role for migration job
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: sparc-migration-role
  namespace: ${NAMESPACE:-sparc}
  labels:
    app: sparc-migration
    component: database
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["get", "list", "watch"]

---
# Role binding for migration job
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: sparc-migration-rolebinding
  namespace: ${NAMESPACE:-sparc}
  labels:
    app: sparc-migration
    component: database
subjects:
- kind: ServiceAccount
  name: sparc-migration-sa
  namespace: ${NAMESPACE:-sparc}
roleRef:
  kind: Role
  name: sparc-migration-role
  apiGroup: rbac.authorization.k8s.io

---
# Network Policy for migration job (optional security enhancement)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: sparc-migration-netpol
  namespace: ${NAMESPACE:-sparc}
  labels:
    app: sparc-migration
    component: database
spec:
  podSelector:
    matchLabels:
      app: sparc-migration
  policyTypes:
  - Egress
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Allow database connection
  - to: []
    ports:
    - protocol: TCP
      port: 5432
  # Allow HTTPS for npm/prisma downloads if needed
  - to: []
    ports:
    - protocol: TCP
      port: 443