---
# Namespace for SPARC platform
apiVersion: v1
kind: Namespace
metadata:
  name: sparc
  labels:
    name: sparc
    app.kubernetes.io/name: sparc
    app.kubernetes.io/component: platform

---
# ConfigMap for API Gateway configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-gateway-config
  namespace: sparc
  labels:
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/component: gateway
    app.kubernetes.io/part-of: sparc
data:
  NODE_ENV: "production"
  PORT: "3000"
  LOG_LEVEL: "info"
  CORS_ORIGIN: "https://app.sparc.com"
  RATE_LIMIT_WINDOW_MS: "900000"  # 15 minutes
  RATE_LIMIT_MAX_REQUESTS: "1000"
  JWT_ALGORITHM: "RS256"
  SERVICE_DISCOVERY_ENABLED: "true"
  HEALTH_CHECK_INTERVAL: "30000"
  REQUEST_TIMEOUT: "30000"
  CIRCUIT_BREAKER_ENABLED: "true"
  CIRCUIT_BREAKER_THRESHOLD: "5"
  CIRCUIT_BREAKER_TIMEOUT: "60000"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: api-gateway-secrets
  namespace: sparc
  labels:
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/component: gateway
    app.kubernetes.io/part-of: sparc
type: Opaque
data:
  # Base64 encoded values - these should be set during deployment
  JWT_PUBLIC_KEY: ""  # RSA public key for JWT verification
  REDIS_URL: ""       # Redis connection string
  DATABASE_URL: ""    # PostgreSQL connection string
  API_SECRET_KEY: ""  # Secret for API authentication

---
# ServiceAccount for API Gateway
apiVersion: v1
kind: ServiceAccount
metadata:
  name: api-gateway
  namespace: sparc
  labels:
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/component: gateway
    app.kubernetes.io/part-of: sparc
automountServiceAccountToken: false

---
# Deployment for API Gateway
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: sparc
  labels:
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/component: gateway
    app.kubernetes.io/part-of: sparc
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: api-gateway
      app.kubernetes.io/component: gateway
  template:
    metadata:
      labels:
        app.kubernetes.io/name: api-gateway
        app.kubernetes.io/component: gateway
        app.kubernetes.io/part-of: sparc
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: api-gateway
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: api-gateway
        image: sparc/api-gateway:1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: api-gateway-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: api-gateway-config
              key: PORT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: api-gateway-config
              key: LOG_LEVEL
        - name: CORS_ORIGIN
          valueFrom:
            configMapKeyRef:
              name: api-gateway-config
              key: CORS_ORIGIN
        - name: RATE_LIMIT_WINDOW_MS
          valueFrom:
            configMapKeyRef:
              name: api-gateway-config
              key: RATE_LIMIT_WINDOW_MS
        - name: RATE_LIMIT_MAX_REQUESTS
          valueFrom:
            configMapKeyRef:
              name: api-gateway-config
              key: RATE_LIMIT_MAX_REQUESTS
        - name: JWT_ALGORITHM
          valueFrom:
            configMapKeyRef:
              name: api-gateway-config
              key: JWT_ALGORITHM
        - name: SERVICE_DISCOVERY_ENABLED
          valueFrom:
            configMapKeyRef:
              name: api-gateway-config
              key: SERVICE_DISCOVERY_ENABLED
        - name: HEALTH_CHECK_INTERVAL
          valueFrom:
            configMapKeyRef:
              name: api-gateway-config
              key: HEALTH_CHECK_INTERVAL
        - name: REQUEST_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: api-gateway-config
              key: REQUEST_TIMEOUT
        - name: CIRCUIT_BREAKER_ENABLED
          valueFrom:
            configMapKeyRef:
              name: api-gateway-config
              key: CIRCUIT_BREAKER_ENABLED
        - name: CIRCUIT_BREAKER_THRESHOLD
          valueFrom:
            configMapKeyRef:
              name: api-gateway-config
              key: CIRCUIT_BREAKER_THRESHOLD
        - name: CIRCUIT_BREAKER_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: api-gateway-config
              key: CIRCUIT_BREAKER_TIMEOUT
        - name: JWT_PUBLIC_KEY
          valueFrom:
            secretKeyRef:
              name: api-gateway-secrets
              key: JWT_PUBLIC_KEY
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: api-gateway-secrets
              key: REDIS_URL
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: api-gateway-secrets
              key: DATABASE_URL
        - name: API_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: api-gateway-secrets
              key: API_SECRET_KEY
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - api-gateway
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300

---
# Service for API Gateway
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: sparc
  labels:
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/component: gateway
    app.kubernetes.io/part-of: sparc
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/health"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval: "30"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-timeout: "10"
    service.beta.kubernetes.io/aws-load-balancer-healthy-threshold: "2"
    service.beta.kubernetes.io/aws-load-balancer-unhealthy-threshold: "3"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  selector:
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/component: gateway
  sessionAffinity: None

---
# HorizontalPodAutoscaler for API Gateway
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-gateway-hpa
  namespace: sparc
  labels:
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/component: gateway
    app.kubernetes.io/part-of: sparc
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-gateway
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max

---
# PodDisruptionBudget for API Gateway
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: api-gateway-pdb
  namespace: sparc
  labels:
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/component: gateway
    app.kubernetes.io/part-of: sparc
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: api-gateway
      app.kubernetes.io/component: gateway

---
# NetworkPolicy for API Gateway
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: api-gateway-netpol
  namespace: sparc
  labels:
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/component: gateway
    app.kubernetes.io/part-of: sparc
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: api-gateway
      app.kubernetes.io/component: gateway
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: istio-system
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: web
    ports:
    - protocol: TCP
      port: 3000
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Allow access to other SPARC services
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/part-of: sparc
    ports:
    - protocol: TCP
      port: 3000
  # Allow access to Redis
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  # Allow access to PostgreSQL
  - to:
    - podSelector:
        matchLabels:
          app: postgresql
    ports:
    - protocol: TCP
      port: 5432
  # Allow HTTPS outbound for external APIs
  - to: []
    ports:
    - protocol: TCP
      port: 443

---
# Ingress for API Gateway with SSL termination and rate limiting
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api-gateway-ingress
  namespace: sparc
  labels:
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/component: gateway
    app.kubernetes.io/part-of: sparc
  annotations:
    # NGINX Ingress Controller annotations
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-connections: "100"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self' wss: https:; frame-ancestors 'none';";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains; preload";
    
    # CORS configuration
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://app.sparc.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-Tenant-ID"
    nginx.ingress.kubernetes.io/cors-expose-headers: "Content-Length,Content-Range,X-Rate-Limit-Remaining,X-Rate-Limit-Reset"
    nginx.ingress.kubernetes.io/cors-max-age: "86400"
    
    # Load balancing and upstream configuration
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    
    # SSL configuration
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-GCM-SHA384"
    
    # Certificate management
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    cert-manager.io/acme-challenge-type: "http01"
    
    # WAF and DDoS protection
    nginx.ingress.kubernetes.io/limit-connections: "100"
    nginx.ingress.kubernetes.io/limit-rps: "100"
    nginx.ingress.kubernetes.io/limit-rpm: "6000"
    
    # Health check configuration
    nginx.ingress.kubernetes.io/health-check-path: "/health"
    nginx.ingress.kubernetes.io/health-check-interval: "30s"
    nginx.ingress.kubernetes.io/health-check-timeout: "10s"
    
    # Monitoring and observability
    nginx.ingress.kubernetes.io/enable-access-log: "true"
    nginx.ingress.kubernetes.io/enable-rewrite-log: "true"
spec:
  tls:
  - hosts:
    - api.sparc.com
    - api-staging.sparc.com
    secretName: api-gateway-tls
  rules:
  - host: api.sparc.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: api-gateway
            port:
              number: 80
  - host: api-staging.sparc.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: api-gateway
            port:
              number: 80

---
# Certificate for SSL termination
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: api-gateway-cert
  namespace: sparc
  labels:
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/component: gateway
    app.kubernetes.io/part-of: sparc
spec:
  secretName: api-gateway-tls
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - api.sparc.com
  - api-staging.sparc.com
  usages:
  - digital signature
  - key encipherment

---
# ServiceMonitor for Prometheus monitoring
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: api-gateway-metrics
  namespace: sparc
  labels:
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/component: gateway
    app.kubernetes.io/part-of: sparc
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: api-gateway
      app.kubernetes.io/component: gateway
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
    honorLabels: true
  namespaceSelector:
    matchNames:
    - sparc

---
# PrometheusRule for alerting
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: api-gateway-alerts
  namespace: sparc
  labels:
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/component: gateway
    app.kubernetes.io/part-of: sparc
spec:
  groups:
  - name: api-gateway.rules
    rules:
    - alert: APIGatewayDown
      expr: up{job="api-gateway-metrics"} == 0
      for: 5m
      labels:
        severity: critical
        service: api-gateway
      annotations:
        summary: "API Gateway is down"
        description: "API Gateway has been down for more than 5 minutes"
    
    - alert: APIGatewayHighLatency
      expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job="api-gateway-metrics"}[5m])) > 0.2
      for: 10m
      labels:
        severity: warning
        service: api-gateway
      annotations:
        summary: "API Gateway high latency"
        description: "API Gateway 95th percentile latency is above 200ms for more than 10 minutes"
    
    - alert: APIGatewayHighErrorRate
      expr: rate(http_requests_total{job="api-gateway-metrics",status=~"5.."}[5m]) / rate(http_requests_total{job="api-gateway-metrics"}[5m]) > 0.05
      for: 5m
      labels:
        severity: critical
        service: api-gateway
      annotations:
        summary: "API Gateway high error rate"
        description: "API Gateway error rate is above 5% for more than 5 minutes"
    
    - alert: APIGatewayHighMemoryUsage
      expr: container_memory_usage_bytes{pod=~"api-gateway-.*"} / container_spec_memory_limit_bytes > 0.9
      for: 10m
      labels:
        severity: warning
        service: api-gateway
      annotations:
        summary: "API Gateway high memory usage"
        description: "API Gateway memory usage is above 90% for more than 10 minutes"
    
    - alert: APIGatewayHighCPUUsage
      expr: rate(container_cpu_usage_seconds_total{pod=~"api-gateway-.*"}[5m]) / container_spec_cpu_quota * 100 > 80
      for: 15m
      labels:
        severity: warning
        service: api-gateway
      annotations:
        summary: "API Gateway high CPU usage"
        description: "API Gateway CPU usage is above 80% for more than 15 minutes"