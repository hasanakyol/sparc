apiVersion: apps/v1
kind: Deployment
metadata:
  name: backup-recovery-service
  namespace: sparc
  labels:
    app: backup-recovery-service
    component: backend
    tier: service
    version: v1
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: backup-recovery-service
  template:
    metadata:
      labels:
        app: backup-recovery-service
        component: backend
        tier: service
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3009"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: backup-recovery-service
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: backup-recovery-service
        image: sparc/backup-recovery-service:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 3009
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3009"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: sparc-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: sparc-secrets
              key: redis-url
        - name: AWS_REGION
          valueFrom:
            configMapKeyRef:
              name: backup-recovery-config
              key: aws-region
        - name: AWS_BACKUP_REGION
          valueFrom:
            configMapKeyRef:
              name: backup-recovery-config
              key: aws-backup-region
        - name: AWS_CROSS_REGION_BACKUP_REGION
          valueFrom:
            configMapKeyRef:
              name: backup-recovery-config
              key: aws-cross-region-backup-region
        - name: AWS_BACKUP_VAULT_NAME
          valueFrom:
            configMapKeyRef:
              name: backup-recovery-config
              key: aws-backup-vault-name
        - name: AWS_BACKUP_PLAN_ID
          valueFrom:
            secretKeyRef:
              name: sparc-secrets
              key: aws-backup-plan-id
        - name: AWS_BACKUP_ROLE_ARN
          valueFrom:
            secretKeyRef:
              name: sparc-secrets
              key: aws-backup-role-arn
        - name: AWS_RDS_INSTANCE_IDENTIFIER
          valueFrom:
            configMapKeyRef:
              name: backup-recovery-config
              key: aws-rds-instance-identifier
        - name: AWS_S3_BACKUP_BUCKET
          valueFrom:
            configMapKeyRef:
              name: backup-recovery-config
              key: aws-s3-backup-bucket
        - name: AWS_S3_CROSS_REGION_BUCKET
          valueFrom:
            configMapKeyRef:
              name: backup-recovery-config
              key: aws-s3-cross-region-bucket
        - name: AWS_KMS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: sparc-secrets
              key: aws-kms-key-id
        - name: BACKUP_RETENTION_DAYS
          valueFrom:
            configMapKeyRef:
              name: backup-recovery-config
              key: backup-retention-days
        - name: BACKUP_SCHEDULE_CRON
          valueFrom:
            configMapKeyRef:
              name: backup-recovery-config
              key: backup-schedule-cron
        - name: RECOVERY_TARGET_SECONDS
          valueFrom:
            configMapKeyRef:
              name: backup-recovery-config
              key: recovery-target-seconds
        - name: INTEGRITY_CHECK_INTERVAL_HOURS
          valueFrom:
            configMapKeyRef:
              name: backup-recovery-config
              key: integrity-check-interval-hours
        - name: OFFLINE_OPERATION_HOURS
          valueFrom:
            configMapKeyRef:
              name: backup-recovery-config
              key: offline-operation-hours
        - name: CORS_ORIGIN
          valueFrom:
            configMapKeyRef:
              name: sparc-config
              key: cors-origin
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: sparc-config
              key: log-level
        - name: RATE_LIMIT_WINDOW_MS
          valueFrom:
            configMapKeyRef:
              name: sparc-config
              key: rate-limit-window-ms
        - name: RATE_LIMIT_MAX_REQUESTS
          valueFrom:
            configMapKeyRef:
              name: sparc-config
              key: rate-limit-max-requests
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 30
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
        - name: backup-cache
          mountPath: /app/backup-cache
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      - name: backup-cache
        emptyDir:
          sizeLimit: 10Gi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - backup-recovery-service
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "sparc.io/backup-recovery-service"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---
apiVersion: v1
kind: Service
metadata:
  name: backup-recovery-service
  namespace: sparc
  labels:
    app: backup-recovery-service
    component: backend
    tier: service
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  selector:
    app: backup-recovery-service

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backup-recovery-service
  namespace: sparc
  labels:
    app: backup-recovery-service
    component: backend
    tier: service
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/sparc-backup-recovery-service-role
automountServiceAccountToken: true

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backup-recovery-service-hpa
  namespace: sparc
  labels:
    app: backup-recovery-service
    component: backend
    tier: service
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backup-recovery-service
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 1
        periodSeconds: 60
      selectPolicy: Max

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: backup-recovery-service-pdb
  namespace: sparc
  labels:
    app: backup-recovery-service
    component: backend
    tier: service
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: backup-recovery-service

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backup-recovery-service-netpol
  namespace: sparc
  labels:
    app: backup-recovery-service
    component: backend
    tier: service
spec:
  podSelector:
    matchLabels:
      app: backup-recovery-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: sparc
    - podSelector:
        matchLabels:
          app: api-gateway
    - podSelector:
        matchLabels:
          app: nginx-ingress
    ports:
    - protocol: TCP
      port: 3009
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: sparc
    - podSelector:
        matchLabels:
          app: postgresql
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - namespaceSelector:
        matchLabels:
          name: sparc
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backup-recovery-config
  namespace: sparc
  labels:
    app: backup-recovery-service
    component: config
data:
  aws-region: "us-east-1"
  aws-backup-region: "us-east-1"
  aws-cross-region-backup-region: "us-west-2"
  aws-backup-vault-name: "sparc-backup-vault"
  aws-rds-instance-identifier: "sparc-production-db"
  aws-s3-backup-bucket: "sparc-backup-primary"
  aws-s3-cross-region-bucket: "sparc-backup-cross-region"
  backup-retention-days: "2555"
  backup-schedule-cron: "0 2 * * *"
  recovery-target-seconds: "30"
  integrity-check-interval-hours: "24"
  offline-operation-hours: "72"

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: backup-recovery-service-monitor
  namespace: sparc
  labels:
    app: backup-recovery-service
    component: monitoring
spec:
  selector:
    matchLabels:
      app: backup-recovery-service
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s

---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: backup-recovery-service-alerts
  namespace: sparc
  labels:
    app: backup-recovery-service
    component: monitoring
spec:
  groups:
  - name: backup-recovery-service.rules
    rules:
    - alert: BackupRecoveryServiceDown
      expr: up{job="backup-recovery-service"} == 0
      for: 1m
      labels:
        severity: critical
        service: backup-recovery-service
      annotations:
        summary: "Backup Recovery Service is down"
        description: "Backup Recovery Service has been down for more than 1 minute"
    - alert: BackupRecoveryServiceHighCPU
      expr: rate(container_cpu_usage_seconds_total{pod=~"backup-recovery-service-.*"}[5m]) > 0.8
      for: 5m
      labels:
        severity: warning
        service: backup-recovery-service
      annotations:
        summary: "Backup Recovery Service high CPU usage"
        description: "Backup Recovery Service CPU usage is above 80% for more than 5 minutes"
    - alert: BackupRecoveryServiceHighMemory
      expr: container_memory_usage_bytes{pod=~"backup-recovery-service-.*"} / container_spec_memory_limit_bytes > 0.9
      for: 5m
      labels:
        severity: warning
        service: backup-recovery-service
      annotations:
        summary: "Backup Recovery Service high memory usage"
        description: "Backup Recovery Service memory usage is above 90% for more than 5 minutes"
    - alert: BackupJobFailed
      expr: increase(backup_job_failures_total[1h]) > 0
      for: 1m
      labels:
        severity: critical
        service: backup-recovery-service
      annotations:
        summary: "Backup job failed"
        description: "One or more backup jobs have failed in the last hour"
    - alert: BackupIntegrityCheckFailed
      expr: increase(backup_integrity_check_failures_total[1h]) > 0
      for: 1m
      labels:
        severity: critical
        service: backup-recovery-service
      annotations:
        summary: "Backup integrity check failed"
        description: "Backup integrity validation has failed"
    - alert: RecoveryTargetExceeded
      expr: backup_recovery_time_seconds > 30
      for: 1m
      labels:
        severity: critical
        service: backup-recovery-service
      annotations:
        summary: "Recovery target time exceeded"
        description: "Recovery operation took longer than 30 seconds target"
    - alert: CrossRegionReplicationLag
      expr: backup_cross_region_replication_lag_seconds > 3600
      for: 5m
      labels:
        severity: warning
        service: backup-recovery-service
      annotations:
        summary: "Cross-region replication lag high"
        description: "Cross-region backup replication is lagging by more than 1 hour"

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: backup-integrity-check
  namespace: sparc
  labels:
    app: backup-recovery-service
    component: cronjob
spec:
  schedule: "0 3 * * *"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: backup-recovery-service
            component: cronjob
        spec:
          serviceAccountName: backup-recovery-service
          restartPolicy: OnFailure
          containers:
          - name: integrity-check
            image: sparc/backup-recovery-service:latest
            command: ["node", "dist/scripts/integrity-check.js"]
            env:
            - name: NODE_ENV
              value: "production"
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: sparc-secrets
                  key: database-url
            - name: AWS_BACKUP_VAULT_NAME
              valueFrom:
                configMapKeyRef:
                  name: backup-recovery-config
                  key: aws-backup-vault-name
            - name: AWS_S3_BACKUP_BUCKET
              valueFrom:
                configMapKeyRef:
                  name: backup-recovery-config
                  key: aws-s3-backup-bucket
            resources:
              requests:
                memory: "256Mi"
                cpu: "250m"
              limits:
                memory: "512Mi"
                cpu: "500m"

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: backup-cleanup
  namespace: sparc
  labels:
    app: backup-recovery-service
    component: cronjob
spec:
  schedule: "0 4 * * 0"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: backup-recovery-service
            component: cronjob
        spec:
          serviceAccountName: backup-recovery-service
          restartPolicy: OnFailure
          containers:
          - name: backup-cleanup
            image: sparc/backup-recovery-service:latest
            command: ["node", "dist/scripts/cleanup-old-backups.js"]
            env:
            - name: NODE_ENV
              value: "production"
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: sparc-secrets
                  key: database-url
            - name: BACKUP_RETENTION_DAYS
              valueFrom:
                configMapKeyRef:
                  name: backup-recovery-config
                  key: backup-retention-days
            - name: AWS_S3_BACKUP_BUCKET
              valueFrom:
                configMapKeyRef:
                  name: backup-recovery-config
                  key: aws-s3-backup-bucket
            - name: AWS_S3_CROSS_REGION_BUCKET
              valueFrom:
                configMapKeyRef:
                  name: backup-recovery-config
                  key: aws-s3-cross-region-bucket
            resources:
              requests:
                memory: "256Mi"
                cpu: "250m"
              limits:
                memory: "512Mi"
                cpu: "500m"